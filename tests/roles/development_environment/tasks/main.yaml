- name: pre-launch test VM instance
  no_log: "{{ use_no_log }}"
  when: prelaunch_test_instance|bool
  vars:
    cinder_volume_backend_configured: "{{  cinder_volume_backend in supported_volume_backends }}"
    cinder_backup_backend_configured: "{{  cinder_backup_backend in supported_backup_backends }}"
  ansible.builtin.shell:
    cmd: |
      {{ shell_header }}
      export OPENSTACK_COMMAND="{{ openstack_command }}"
      export CINDER_VOLUME_BACKEND_CONFIGURED={{ cinder_volume_backend_configured | string | lower }}
      export CINDER_BACKUP_BACKEND_CONFIGURED={{ cinder_backup_backend_configured | string | lower }}
      export ENROLL_BMAAS_IRONIC_NODES={{ enroll_ironic_bmaas_nodes | string | lower }}
      export PRE_LAUNCH_IRONIC_RESTART_CHRONY={{ pre_launch_ironic_restart_chrony | string | lower }}
      export PING_TEST_VM={{ ping_test | string | lower }}
      {{ lookup('ansible.builtin.file', prelaunch_test_instance_script) }}

- name: Start and setup ping test
  when:
    - prelaunch_test_instance|bool
    - ping_test|bool
  block:
    - name: Start the ping test to the VM instance.
      vars:
        fip: 192.168.122.21
      ansible.builtin.shell:
        cmd: |
          ping -D {{ fip }} &> {{ ping_test_log_file }} &
    - name: Create stop l3 agent connectivity check scripts.
      ansible.builtin.template:
        src: "stop_ping.sh.j2"
        dest: "{{ stop_ping_script }}"
        mode: "0775"
    - name: Remember that the ping test is running.
      ansible.builtin.set_fact:
        stop_ping_script: "{{ stop_ping_script }}"
        # We need to remember those two when the role's default values
        # are used, ie not set from loaded variable file.
        prelaunch_test_instance: "{{ prelaunch_test_instance }}"
        ping_test: "{{ ping_test }}"

- name: creates Barbican secret
  no_log: "{{ use_no_log }}"
  when: prelaunch_test_instance|bool and prelaunch_barbican_secret|default(false)
  ansible.builtin.shell:
    cmd: |
      {{ shell_header }}
      {{ openstack_command }} secret store --name testSecret --payload 'TestPayload'

- name: Issue session fernet token
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: |
      {{ shell_header }}
      {{ openstack_command }} token issue -f value -c id
  register: before_adoption_token

- name: Create credential for sanity checking its value after adoption
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: |
      {{ shell_header }}
      {{ openstack_command }} credential create admin test -f value -c id
  register: before_adoption_credential

- name: create resources script
  when: neutron_qe_test | default('false') | bool
  environment:
    OS_CLOUD_IP: "{{ standalone_ip | default(edpm_node_ip) }}"
  block:
    - name: execute create resources script
      ansible.builtin.shell: |
          ssh ${OS_CLOUD_IP} "set -o pipefail && chmod 744 {{ neutron_qe_dir }}/create_resources.sh && \
          {{ neutron_qe_dir }}/create_resources.sh > {{ neutron_qe_dir }}/create_resources.sh.log 2>&1"

    - name: execute prepare-pinger script
      ansible.builtin.shell: |
          ssh ${OS_CLOUD_IP} "set -o pipefail && chmod 744 {{ neutron_qe_dir }}/prepare-pinger.sh && \
          {{ neutron_qe_dir }}/prepare-pinger.sh > {{ neutron_qe_dir }}/prepare-pinger.sh.log 2>&1"

    - name: execute start-pinger script
      ansible.builtin.shell: |
          timeout 20 ssh ${OS_CLOUD_IP} "set -o pipefail && chmod 744 {{ neutron_qe_dir }}/start-pinger.sh && \
          nohup {{ neutron_qe_dir }}/start-pinger.sh > {{ neutron_qe_dir }}/start-pinger.sh.log 2>&1" &

- name: tobiko validate pings, create workloads
  when: tobiko_qe_test | default('false') | bool
  environment:
    OS_CLOUD_IP: "{{ standalone_ip | default(edpm_node_ip) }}"
  block:
    # Temporal - tobiko installation task
    - name: tobiko installation
      ansible.builtin.shell: |
          ssh ${OS_CLOUD_IP} "set -o pipefail && mkdir -p ~/src/x && cd ~/src/x && git clone https://github.com/redhat-openstack/tobiko.git"

    - name: oc undercloud installation
      ansible.builtin.shell: >
          ssh ${OS_CLOUD_IP} "curl -s -L https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz
          | sudo tar -zxvf - -C /usr/local/bin/"

    - name: copy kube conf to undercloud
      ansible.builtin.shell: |
        scp -r ~/.kube/ ${OS_CLOUD_IP}:~

    - name: upload tobiko-playbook.yaml to the undercloud
      delegate_to: "{{ standalone_ip | default(edpm_node_ip) }}"
      vars:
        tobiko_playbook: |
          - name: Playbook to run tobiko from the undercloud pre-adoption
            hosts: localhost
            tasks:
              - name: "run tests"
                ansible.builtin.include_role:
                  name: tobiko-run
      ansible.builtin.copy:
        mode: a+r
        content: "{{ tobiko_playbook }}"
        dest: ~/src/x/tobiko/tobiko-playbook.yaml

    - name: Add tobiko.conf to the undercloud
      delegate_to: "{{ standalone_ip | default(edpm_node_ip) }}"
      vars:
        tobiko_conf_file: |
          [DEFAULT]
          log_dir = /home/zuul/src/x/tobiko/report
          log_file = tobiko.log
          debug = true
          [testcase]
          test_runner_timeout = 14400.0
          timeout = 1800.0
          [advanced_vm]
          image_url = "https://softwarefactory-project.io/ubuntu-minimal-customized-enp3s0"
          username: ubuntu
          [tripleo]
          undercloud_ssh_hostname = undercloud
          undercloud_ssh_username = zuul
          run_background_ping_in_pod = true
          [keystone]
          interface = public
          [neutron]
          custom_mtu_size = 1292
      ansible.builtin.copy:
        mode: a+r
        content: "{{ tobiko_conf_file }}"
        dest: ~/src/x/tobiko/tobiko.conf

    - name: Run Tobiko from the undercloud
      delegate_to: "{{ standalone_ip | default(edpm_node_ip) }}"
      ansible.builtin.shell:
        chdir: ~/src/x/tobiko/
        cmd: ansible-playbook tobiko-playbook.yaml -e test_workflow=create-resources -e pytest_addopts_global="--skipregex='TestFloatingIPLogging|ExtraDhcpOptsPortLoggingTest|NoFipPortTest|StatelessSecurityGroupInstanceTest|StatelessSecurityGroupTest|migrate_server|qos|create_share|extend_share'"
