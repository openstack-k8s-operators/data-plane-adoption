- name: get podified MariaDB service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "mariadb/name=openstack" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_mariadb_ip_result

- name: get podified cell1 MariaDB IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "mariadb/name=openstack-cell1" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_cell1_mariadb_ip_result

- name: get ospdo MariaDB service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane sudo cat /var/lib/config-data/puppet-generated/haproxy/etc/haproxy/haproxy.cfg "'| grep -A1 'listen mysql'|tail -n 1|sed 's/.*bind //g' |sed 's/:3306.*//g'
  register: source_mariadb_ip

- name: get ospdo MariaDB pass
  ansible.builtin.shell: |
    {{ shell_header }}
    sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc get secret tripleo-passwords -o jsonpath='{.data.*}' | base64 -d | grep MysqlRootPassword'|sed 's/.*: //g'
  register: source_db_root_password

- name: get ospdo galera container name
  ansible.builtin.shell: |
      {{ shell_header }}
        sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane sudo podman ps -f name=galera --format="{{'{{'}}.Names{{'}}'}}""'
  register: galera_con_name

- name: check galera container exec
  ansible.builtin.shell: |
    {{ shell_header }}
    sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane sudo podman exec -t {{ galera_con_name.stdout }} ps -ef "'

  # The CHARACTER_SET and collation should match the source DB
  # if the do not then it will break foreign key relationships
  # for any tables that are created in the future as part of db sync
- name: set MariaDB copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    mariadb_copy_shell_vars: |
      MARIADB_IMAGE=quay.io/podified-antelope-centos9/openstack-mariadb:current-podified

      PODIFIED_MARIADB_IP={{ podified_mariadb_ip_result.stdout }}
      PODIFIED_CELL1_MARIADB_IP={{ podified_cell1_mariadb_ip_result.stdout }}
      PODIFIED_DB_ROOT_PASSWORD="{{ podified_db_root_password }}"

      SOURCE_MARIADB_IP={{ source_mariadb_ip.stdout }}
      SOURCE_DB_ROOT_PASSWORD="{{ source_db_root_password.stdout }}"

      GALERA_CON_NAME = {{ galera_con_name.stdout }}

      CHARACTER_SET=utf8
      COLLATION=utf8_general_ci

- name: MariaDB copy pre checks
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'pre_checks.bash') }}"

- name: get mysql client on osp controller-0
  ansible.builtin.shell: |
   {{ shell_header }}
   sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane "git clone https://gitlab.cee.redhat.com/pkomarov/CI.git ;cd CI ;sudo ./subscription.sh;sudo dnf install -y mysql"
    "'


- name: dump databases
  ansible.builtin.shell: |
   {{ shell_header }}
   sshpass -p12345678 ssh root@titan132.lab.eng.tlv2.redhat.com 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane sudo podman exec -t {{ galera_con_name.stdout }} sudo podman exec -t {{ galera_con_name.stdout }} -c "  mysql -h {{ source_mariadb_ip.stdout }} -u root "-p{{ source_db_root_password.stdout }}" -N -e 'show databases' | grep -E -v 'schema|mysql' | while read dbname; do echo "Dumping \${dbname}"
    mysqldump -h {{ source_mariadb_ip.stdout }} -uroot "-p{{ source_db_root_password.stdout }}" \
        --single-transaction --complete-insert --skip-lock-tables --lock-tables=0 \
        "\${dbname}" > "/var/log/mariadb/\${dbname}".sql
  done
  " # podman exec
  '" # ssh_openstackclient & controller  '  "'

- meta: end_play

# Below is unutilized in ospdo as it breaks bash variables during remote ssh calls with no W/A.
# - name: dump databases
#   no_log: "{{ use_no_log }}"
#   ansible.builtin.shell:
#     cmd: "{{ lookup('ansible.builtin.template', 'dump_dbs.bash') }}"

- name: restore databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'restore_dbs.bash') }}"

- name: MariaDB post-checks
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'post_checks.bash') }}"
