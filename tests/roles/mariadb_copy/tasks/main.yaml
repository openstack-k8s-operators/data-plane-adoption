- name: get podified MariaDB service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "mariadb/name=openstack" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_mariadb_ip_result

- name: get podified cell1 MariaDB IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "mariadb/name=openstack-cell1" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_cell1_mariadb_ip_result

- name: get ospdo MariaDB service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -t -n openstack openstackclient -c openstackclient -- bash -c "ssh controller-0.ctlplane sudo cat /var/lib/config-data/puppet-generated/haproxy/etc/haproxy/haproxy.cfg "'| grep -A1 'listen mysql'|tail -n 1|sed 's/.*bind //g' |sed 's/:3306.*//g'
  register: source_mariadb_ip

- name: get ospdo MariaDB pass
  ansible.builtin.shell: |
    {{ shell_header }}
    sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc get secret tripleo-passwords -o jsonpath='{.data.*}' | base64 -d | grep MysqlRootPassword'|sed 's/.*: //g'
  register: source_db_root_password


  # The CHARACTER_SET and collation should match the source DB
  # if the do not then it will break foreign key relationships
  # for any tables that are created in the future as part of db sync
- name: set MariaDB copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    mariadb_copy_shell_vars: |
      MARIADB_IMAGE=quay.io/podified-antelope-centos9/openstack-mariadb:current-podified

      PODIFIED_MARIADB_IP={{ podified_mariadb_ip_result.stdout }}
      PODIFIED_CELL1_MARIADB_IP={{ podified_cell1_mariadb_ip_result.stdout }}
      PODIFIED_DB_ROOT_PASSWORD="{{ podified_db_root_password }}"

      SOURCE_MARIADB_IP={{ source_mariadb_ip.stdout }}
      SOURCE_DB_ROOT_PASSWORD="{{ source_db_root_password.stdout }}"

      CHARACTER_SET=utf8
      COLLATION=utf8_general_ci


#The following setup and execute the db extarction
- name: get adaption repo on ctrl0
  ansible.builtin.shell: |
          sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-0.ctlplane 'git clone https://github.com/pinikomarov/data-plane-adoption_pkomarov.git' ''
  ignore_errors: true

# # Below is unutilized in ospdo as it breaks bash variables during remote ssh calls with no W/A.
# - name: dump databases
#   no_log: "{{ use_no_log }}"
#   ansible.builtin.shell:
#     cmd: "{{ lookup('ansible.builtin.template', 'dump_dbs.bash') }}"

# currently has issue : ERROR 2013 (HY000): Lost connection to MySQL server at 'reading initial communication packet', system error: 0
- name: run get dbs script on galera container
  ansible.builtin.shell: |
      sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-0.ctlplane "sudo /home/cloud-admin/data-plane-adoption_pkomarov/tests/roles/mariadb_copy/templates/get_dbs_ospdo.sh {{ source_mariadb_ip.stdout }} {{ source_db_root_password.stdout }}" ''

# Copy DB dumps to local tmp
- name: Copy DB dumps ctrl0 to openstackclient
  ansible.builtin.shell: |
      sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec  -n openstack openstackclient -c openstackclient -- bash -c "rsync -avux controller-0.ctlplane:/tmp/mariadb /tmp"'

- name: Copy DB dumps openstackclient to BM
  ansible.builtin.shell: |
      sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc cp openstack/openstackclient:/tmp/mariadb/ /tmp/mariadb'

- name: Copy DB dumps BM to local
  ansible.builtin.shell: |
      sshpass -p12345678 scp -r root@titan132.lab.eng.tlv2.redhat.com:/tmp/mariadb /tmp

- name: Check dumps BM on local
  ansible.builtin.shell: |
      ls /tmp/mariadb/

# TODO check below
- name: restore databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'restore_dbs.bash') }}"

- name: MariaDB post-checks
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'post_checks.bash') }}"
