- name: get the source database service environment variables
  ansible.builtin.include_tasks:
    file: env_vars_src.yaml

- name: execute alternative tasks when source env is OSPdO
  ansible.builtin.include_role:
    name: mariadb_copy
    tasks_from: env_vars_src_ospdo.yaml
  when: ospdo_src| bool

- name: get the destination database service environment variables
  ansible.builtin.include_tasks:
    file: env_vars_dst.yaml

- name: start an adoption mariadb helper pod
  ansible.builtin.shell: |-
    {{ shell_header }}
    {{ oc_header }}
    {{ mariadb_copy_shell_vars_src }}

    oc apply -f - <<EOF
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: mariadb-data
      namespace: {{ org_namespace }}
    spec:
      storageClassName: $STORAGE_CLASS
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: mariadb-copy-data
      annotations:
        openshift.io/scc: anyuid
        k8s.v1.cni.cncf.io/networks: {{ copy_pods_custom_networks | default('internalapi') }}
      namespace: {{ org_namespace }}
      labels:
        app: adoption
    spec:
      {{ copy_pods_custom_spec|default('') }}
      containers:
      - image: $MARIADB_IMAGE
        command: [ "sh", "-c", "sleep infinity"]
        name: adoption
        volumeMounts:
        - mountPath: /backup
          name: mariadb-data
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: mariadb-data
        persistentVolumeClaim:
          claimName: mariadb-data
    EOF
  changed_when: true
  notify: delete adoption mariadb helper pod and pvc

- name: wait for the pod to come up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait --for condition=Ready -n {{ org_namespace }} pod/mariadb-copy-data --timeout=10s
  register: mariadb_data_pod_result
  until: mariadb_data_pod_result is success
  retries: 25
  delay: 2

- name: check that the Galera database cluster members are online and synced
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ mariadb_copy_shell_vars_src }}
    for i in "${!SOURCE_GALERA_MEMBERS[@]}"; do
      echo "Checking for the database node $i WSREP status Synced"
      oc rsh -n {{ org_namespace }} mariadb-copy-data mysql \
        -h "${SOURCE_GALERA_MEMBERS[$i]}" -uroot -p"$SOURCE_DB_ROOT_PASSWORD" \
        -e "show global status like 'wsrep_local_state_comment'" | \
        grep -qE "\bSynced\b"
    done

- name: Get the count of not-OK source databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {% if pulled_openstack_configuration_shell_headers is defined %}
    {{ pulled_openstack_configuration_shell_headers }}
    {% else %}
    . ~/.source_cloud_exported_variables
    {% endif %}

    test -z "$PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK"  || [ "$PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK" = " " ] && echo "OK" || echo "CHECK FAILED"
  register: result
  failed_when: result.rc != 0 or 'CHECK FAILED' in result.stdout

- name: test connection to podified DBs (show databases)
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'pre_checks.bash') }}"

- name: dump databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'dump_dbs.bash') }}"

- name: restore databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'restore_dbs.bash') }}"

- name: Verify MariaDB data imported
  ansible.builtin.include_tasks:
    file: mariadb_verify.yaml
