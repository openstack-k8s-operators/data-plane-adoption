- name: get the source database service environment variables
  ansible.builtin.include_tasks:
    file: env_vars_src.yaml

- name: get the destination database service environment variables
  ansible.builtin.include_tasks:
    file: env_vars_dst.yaml

- name: get mysql adoption scripts to all controllers
  delegate_to: "{{ adoption_ospdo_host }}"
  ansible.builtin.shell: |
    {{ item }} git clone {{ dpa_repo }}
  ignore_errors: true
  loop: "{{ osp_controllers_ssh }}"
  when: ospdo_src is defined

- name: check that the Galera database cluster members are online and synced
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    for i in "${!SOURCE_GALERA_MEMBERS[@]}"; do
      echo "Checking for the database node $i WSREP status Synced"
      sudo podman run -i --rm --userns=keep-id -u $UID $MARIADB_IMAGE mysql \
        -h "${SOURCE_GALERA_MEMBERS[$i]}" -uroot "-p$SOURCE_DB_ROOT_PASSWORD" \
        -e "show global status like 'wsrep_local_state_comment';" |\
        grep -qE '\bSynced\b'
    done
  when: ospdo_src is undefined

- name: check that the Galera database cluster members are online and synced
  delegate_to: "{{ adoption_ospdo_host }}"
  shell: |
    {{ item }} {{ dpa_mysql_script }} check_wsrep | grep -qE '\bSynced\b'
  loop: "{{ osp_controllers_ssh }}"
  when: ospdo_src is defined

- name: Get the count of not-OK source databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {% if pulled_openstack_configuration_shell_headers is defined %}
    {{ pulled_openstack_configuration_shell_headers }}
    {% else %}
    . ~/.source_cloud_exported_variables
    {% endif %}

    test -z "$PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK"  || [ "$PULL_OPENSTACK_CONFIGURATION_MYSQLCHECK_NOK" = " " ]

- name: test connection to podified DBs (show databases)
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'pre_checks.bash') }}"

- name: dump databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'dump_dbs.bash') }}"
  when: ospdo_src is undefined

- name: dump databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.include_tasks:
    file: dbs_ospdo.yaml
  when: ospdo_src is defined

- name: restore databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell:
    cmd: "{{ lookup('ansible.builtin.template', 'restore_dbs.bash') }}"

- name: Verify MariaDB data imported
  ansible.builtin.include_tasks:
    file: mariadb_verify.yaml
