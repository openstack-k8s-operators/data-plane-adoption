
- name: set OSPdO env vars
  block:
  - name: register source_mariadb_ip
    no_log: "{{ use_no_log }}"
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      {{ controller1_ssh }} sudo cat /var/lib/config-data/puppet-generated/haproxy/etc/haproxy/haproxy.cfg | grep -A1 'listen mysql'|tail -n 1|sed 's/.*bind //g' |sed 's/:3306.*//g'
    register: source_mariadb_ip

  - name: register source_db_root_pass
    no_log: "{{ use_no_log }}"
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      oc get secret -n openstack tripleo-passwords -o jsonpath='{.data.*}'| base64 -d |grep MysqlRootPassword|sed 's/.*: //g'
    register: source_db_root_pass

  - name: set src MariaDB copy shell vars
    no_log: "{{ use_no_log }}"
    ansible.builtin.set_fact:
      mariadb_copy_shell_vars_src: |
        MARIADB_IMAGE=quay.io/podified-antelope-centos9/openstack-mariadb:current-podified
        STORAGE_CLASS=host-nfs-storageclass
        SOURCE_MARIADB_IP={{ source_mariadb_ip.stdout }}
        declare -A SOURCE_GALERA_MEMBERS
        SOURCE_GALERA_MEMBERS=(
        ["standalone.localdomain"]={{ source_mariadb_ip.stdout }}
        )
        SOURCE_DB_ROOT_PASSWORD={{ source_db_root_pass.stdout }}


  - name: check that the Galera database cluster members are online and synced
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ mariadb_copy_shell_vars_src }}

      oc apply -f - <<EOF

      apiVersion: v1
      kind: Pod
      metadata:
        name: mariadb-copy-data
        namespace: openstack
        annotations:
          k8s.v1.cni.cncf.io/networks: '[{"name": "internalapi-static", "namespace": "openstack",
              "ips": ["{{ mariadb_copy_pod_ip }}"]}]'
          openshift.io/scc: anyuid
        labels:
          app: adoption
      spec:
        metadata:
          labels:
            app: openstackclient
        containers:
        - image: $MARIADB_IMAGE
          command: [ "sh", "-c", "sleep infinity"]
          name: adoption
          volumeMounts:
          - mountPath: /backup
            name: mariadb-data
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ALL
          runAsNonRoot: false
          seccompProfile:
            type: RuntimeDefault
        volumes:
        - name: mariadb-data
          persistentVolumeClaim:
            claimName: mariadb-data

      EOF

    changed_when: true
  - name: wait for the pod to come up
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ oc_header }}
      oc wait --for condition=Ready pod/mariadb-copy-data --timeout=30s
    register: mariadb_data_pod_result
    until: mariadb_data_pod_result is success
    retries: 5
    delay: 6

  - name: check that the Galera database cluster members are online and synced
    no_log: "{{ use_no_log }}"
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ mariadb_copy_shell_vars_src }}
      for i in "${!SOURCE_GALERA_MEMBERS[@]}"; do
        echo "Checking for the database node $i WSREP status Synced"
        oc rsh mariadb-copy-data mysql \
          -h "${SOURCE_GALERA_MEMBERS[$i]}" -uroot -p"$SOURCE_DB_ROOT_PASSWORD" \
          -e "show global status like 'wsrep_local_state_comment'" | \
          grep -qE "\bSynced\b"
      done

  when: env_vars_pre_tasks| default(false) | bool

- name: ospdo pre tasks
  block:
  - name: get mysql adoption scripts to all controllers
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      {{ item }} git clone {{ dpa_repo }}
    ignore_errors: true
    loop: "{{ osp_controllers_ssh }}"

  - name: check that the Galera database cluster members are online and synced
    delegate_to: "{{ adoption_ospdo_host }}"
    shell: |
      {{ item }} {{ dpa_mysql_script }} check_wsrep | grep -qE '\bSynced\b'
    loop: "{{ osp_controllers_ssh }}"
  when: db_pre_tasks| default(false) | bool

- name: ospdo get mariadb DBs
  block  :
    #The following setup and execute the db extarction
  - name: set mariadb_copy_tmp_dir var
    set_fact:
      mariadb_copy_tmp_dir: /tmp/mariadb

  - name: run get dbs script on galera container
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |

        {{ controller1_ssh }} "export ospdo_src=true;{{ dpa_templates }}/dump_dbs.bash"

  # Copy DB dumps to local tmp
  - name: Copy DB dumps ctrl0 to openstackclient
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
        {{ exec_ospdoclnt_pod }} -- bash -c "rsync -a controller-0.ctlplane:/tmp/mariadb /tmp"

  - name: Copy DB dumps openstackclient to BM
    delegate_to: "{{ adoption_ospdo_host }}"
    ansible.builtin.shell: |
      oc cp openstack/openstackclient:/tmp/mariadb/ /tmp/mariadb

  - name: Copy DB dumps BM to local
    ansible.builtin.shell: |
        scp -r root@{{ adoption_ospdo_host }}:/tmp/mariadb /tmp

  - name: Show DB dumps on local
    ansible.builtin.shell: |
        ls /tmp/mariadb/
  when: ospdo_get_dbs| default(false) | bool
