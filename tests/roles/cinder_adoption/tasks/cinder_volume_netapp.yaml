- name: Slurp cinder.conf from controller
  become: true
  ansible.builtin.shell: |
    {{ shell_header }}
    CONTROLLER1_SCP="{{ controller1_ssh  | regex_replace('^ssh', 'scp')}}"
    ${CONTROLLER1_SCP}:{{ cinder_tripleo_path }} {{ cinder_conf_path }}
    chmod a+r {{ cinder_conf_path }}

- name: Stat the retrieved cinder.conf file
  ansible.builtin.stat:
    path: "{{ cinder_conf_path }}"
  register: cinder_conf

- name: Fail if cinder.conf is not present
  when: not cinder_conf.stat.exists
  ansible.builtin.fail:
    msg: "cinder.conf does not exist"

- name: Check the cinder share config file for ontap-nfs
  when: cinder_volume_backend == 'ontap-nfs'
  block:
    - name: Slurp cinder share config file from controller
      become: true
      ansible.builtin.shell: |
        {{ shell_header }}
        CONTROLLER1_SCP="{{ controller1_ssh  | regex_replace('^ssh', 'scp')}}"
        ${CONTROLLER1_SCP}:{{ cinder_tripleo_nfs_shares_config_path }} {{ cinder_nfs_shares_conf_path }}
        chmod a+r {{ cinder_nfs_shares_conf_path }}

    - name: Stat the retrieved cinder share config file
      ansible.builtin.stat:
        path: "{{ cinder_nfs_shares_conf_path }}"
      register: cinder_nfs_shares_conf

    - name: Fail if cinder share config file is not present
      when: not cinder_nfs_shares_conf.stat.exists
      ansible.builtin.fail:
        msg: "{{ cinder_nfs_shares_conf_path }} does not exist"

- name: Deploy Podified Cinder-Volume - Netapp
  vars:
    cinder_netapp_config: |
      {% set cinder_netapp_conf = {} %}
      {% for item in cinder_volume_netapp_vars %}
      {% set value = lookup('ansible.builtin.ini', item, file=cinder_conf_path, section=cinder_netapp_backend, allow_no_value=True) %}
      {% set _ = cinder_netapp_conf.__setitem__(item, value) %}
      {% endfor %}
      {{ cinder_netapp_conf }}
    cinder_netapp_share_config:
      nfs_server: "{{ (lookup('file', cinder_nfs_shares_conf_path, errors='warn')).split(':')[0] | default('') | trim }}"
      nfs_path: "{{ (lookup('file', cinder_nfs_shares_conf_path, errors='warn')).split(':')[1] | default('') | trim }}"
    cinder_configuration_template:
      ontap-nfs: 'cinder_volume_netapp_nfs.yaml.j2'
      ontap-iscsi: 'cinder_volume_netapp_iscsi.yaml.j2'
  block:
    - name: Fail if cinder_netapp_config params are not defined
      when: |
        cinder_netapp_config.netapp_login is not defined or
        cinder_netapp_config.netapp_password is not defined or
        cinder_netapp_config.netapp_vserver is not defined or
        cinder_netapp_config.netapp_server_hostname is not defined
      ansible.builtin.fail:
        msg:
          - 'Missing required Netapp input'

    - name: Fail if cinder_netapp_share_config params are not defined
      when: |
        cinder_volume_backend == 'ontap-nfs' and
        (not cinder_netapp_share_config.nfs_server or
          not cinder_netapp_share_config.nfs_path)
      ansible.builtin.fail:
        msg:
          - 'Missing required cinder share input'

    - name: Render Netapp OpenShift Secret template
      ansible.builtin.template:
        src: "{{ role_path }}/templates/cinder-volume-ontap-secrets.yaml.j2"
        dest: /tmp/cinder-volume-ontap-secrets.yaml
        mode: "0600"

    - name: Render cinder netapp OpenShift patch file template
      ansible.builtin.template:
        src: "{{ role_path }}/templates/{{ cinder_configuration_template[cinder_volume_backend] }}"
        dest: /tmp/cinder_volume_netapp_config.yaml
        mode: "0600"

    - name: Apply the rendered Netapp secret in the openstack namespace
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f /tmp/cinder-volume-ontap-secrets.yaml

    - name: Configure the appropriate netapp backend
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc patch openstackcontrolplane openstack --type=merge --patch-file=/tmp/cinder_volume_netapp_config.yaml
