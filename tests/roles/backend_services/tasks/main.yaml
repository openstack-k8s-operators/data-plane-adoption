- name: use openstack project
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc project {{ rhoso_namespace }}

- name: create osp-secret
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd {{ install_yamls_path }}
    make input

- name: execute alternative tasks when source env is ODPdO
  ansible.builtin.include_tasks: ospdo_backend_services.yaml
  when: ospdo_src| bool
  vars:
    get_svc_pass: true

- name: set service passwords
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {% if aodh_password %}
        oc set data secret/osp-secret "AodhPassword={{ aodh_password }}"
    {% endif %}
    {% if barbican_password %}
        oc set data secret/osp-secret "BarbicanPassword={{ barbican_password }}"
    {% endif %}
    {% if ceilometer_password %}
        oc set data secret/osp-secret "CeilometerPassword={{ ceilometer_password }}"
    {% endif %}
    {% if cinder_password %}
        oc set data secret/osp-secret "CinderPassword={{ cinder_password }}"
    {% endif %}
    {% if glance_password %}
        oc set data secret/osp-secret "GlancePassword={{ glance_password }}"
    {% endif %}
    {% if ironic_password %}
        oc set data secret/osp-secret "IronicPassword={{ ironic_password }}"
        oc set data secret/osp-secret "IronicInspectorPassword={{ ironic_password }}"
    {% endif %}
    {% if neutron_password %}
        oc set data secret/osp-secret "NeutronPassword={{ neutron_password }}"
    {% endif %}
    {% if nova_password %}
        oc set data secret/osp-secret "NovaPassword={{ nova_password }}"
    {% endif %}
    {% if octavia_password %}
        oc set data secret/osp-secret "OctaviaPassword={{ octavia_password }}"
    {% endif %}
    {% if placement_password %}
        oc set data secret/osp-secret "PlacementPassword={{ placement_password }}"
    {% endif %}
    {% if heat_password %}
        oc set data secret/osp-secret "HeatPassword={{ heat_password }}"
        oc set data secret/osp-secret "HeatAuthEncryptionKey={{ heat_auth_encryption_key }}"
        oc set data secret/osp-secret "HeatStackDomainAdminPassword={{ heat_stack_domain_admin_password }}"
    {% endif %}
    {% if manila_password %}
        oc set data secret/osp-secret "ManilaPassword={{ manila_password }}"
    {% endif %}
    {% if swift_password %}
        oc set data secret/osp-secret "SwiftPassword={{ swift_password }}"
    {% endif %}

- name: create tmp directory
  ansible.builtin.command:
    cmd: mkdir -p "{{ dpa_tests_dir }}/config/tmp"

- name: template out the controlplane deployment
  ansible.builtin.template:
    src: openstack_control_plane.j2
    dest: "../config/tmp/test_deployment.yaml"
    mode: '644'
    force: true
  when: not ospdo_src| bool

- name: when periodic, create OpenStackVersion CR with container overrides
  when:
    - periodic|default(false)
    - container_registry is defined
    - container_tag is defined
    - container_namespace is defined
  block:
    - name: template out the OpenStackVersion deployment with container overrides
      ansible.builtin.template:
        src: openstack_version.j2
        dest: "{{ dpa_tests_dir }}/config/openstack_version_overrides.yaml"
        mode: '644'
        force: true

    - name: Apply OpenStackVersion with container overrides to environment
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f openstack_version_overrides.yaml
      args:
        chdir: "{{ dpa_tests_dir }}/config"

- name: execute alternative tasks when source env is ODPdO
  ansible.builtin.include_tasks: ospdo_backend_services.yaml
  when: ospdo_src| bool
  vars:
    deploy_ctlplane_ospdo: true

- name: Deploy the podified control plane
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f ../config/tmp/test_deployment.yaml
  when: not ospdo_src| bool

- name: wait for services to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait pod --for condition=Ready {{ item }}
  register: service_running_result
  until: service_running_result is success
  retries: 150
  delay: 2
  loop:
    - openstack-galera-0
    - openstack-cell1-galera-0
    - rabbitmq-server-0
    - rabbitmq-cell1-server-0

- name: Patch openstack upstream dns server to set the correct value for the environment
  when: upstream_dns is defined
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    crname=$(oc get openstackcontrolplane -o name)
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/dns/template/options", "value": [{"key": "server", "values": ["{{ upstream_dns }}"]}]}]'

- name: Patch rabbitmq resources for lower resource consumption
  changed_when: false
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    crname=$(oc get openstackcontrolplane -o name)
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/memory", "value": 500Mi}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/memory", "value": 500Mi}]'
