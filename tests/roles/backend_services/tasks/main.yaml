- name: control the local-storage SC creation
  when: storage_class_name != 'local-storage'
  block:
  - name: check if the source SC exists and can be used for the local-storage SC
    no_log: "{{ use_no_log }}"
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ oc_header }}
      oc get sc {{ storage_class_name }} -o yaml
    register: local_sc_result
    failed_when:
      - local_sc_result.rc != 0
      - ('Error from server (NotFound)' not in local_sc_result.stdout)
    changed_when: local_sc_result.rc != 0

  - name: create a local-storage SC from the given source SC
    when: not local_sc_result.changed # noqa: no-handler
    no_log: "{{ use_no_log }}"
    vars:
      _sc_params:
        reclaimPolicy: "{{ storage_reclaim_policy }}"
        metadata:
          resourceVersion: ""
          uuid: ""
          creationTimestamp: ""
          annotations: ""
          name: local-storage
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ oc_header }}
      oc delete --ignore-not-found=true sc local-storage
      echo -e '{{ local_sc_result.stdout | from_yaml | combine(_sc_params) | to_nice_yaml }}' | oc apply -f -

  - name: create a local-storage SC from crc-csi-hostpath-provisioner SC
    when: local_sc_result.changed # noqa: no-handler
    no_log: "{{ use_no_log }}"
    environment:
      STORAGE_RECLAIM_POLICY: "{{ storage_reclaim_policy }}"
    ansible.builtin.shell: |
      {{ shell_header }}
      {{ oc_header }}
      oc apply -f - <<EOF
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        storageclass.kubernetes.io/is-default-class: "false"
        name: local-storage
      parameters:
        storagePool: local
      provisioner: kubevirt.io.hostpath-provisioner
      reclaimPolicy: $STORAGE_RECLAIM_POLICY
      volumeBindingMode: WaitForFirstConsumer
      EOF

- name: use openstack project
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc project openstack

- name: create osp-secret
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd {{ install_yamls_path }}
    make input

- name: set service passwords
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {% if cinder_password %}
        oc set data secret/osp-secret "CinderPassword={{ cinder_password }}"
    {% endif %}
    {% if glance_password %}
        oc set data secret/osp-secret "GlancePassword={{ glance_password }}"
    {% endif %}
    {% if ironic_password %}
        oc set data secret/osp-secret "IronicPassword={{ ironic_password }}"
    {% endif %}
    {% if neutron_password %}
        oc set data secret/osp-secret "NeutronPassword={{ neutron_password }}"
    {% endif %}
    {% if nova_password %}
        oc set data secret/osp-secret "NovaPassword={{ nova_password }}"
    {% endif %}
    {% if octavia_password %}
        oc set data secret/osp-secret "OctaviaPassword={{ octavia_password }}"
    {% endif %}
    {% if placement_password %}
        oc set data secret/osp-secret "PlacementPassword={{ placement_password }}"
    {% endif %}
    {% if heat_password %}
        oc set data secret/osp-secret "HeatPassword={{ heat_password }}"
        oc set data secret/osp-secret "HeatAuthEncryptionKey={{ heat_auth_encryption_key }}"
    {% endif %}
    {% if manila_password %}
        oc set data secret/osp-secret "ManilaPassword={{ manila_password }}"
    {% endif %}

- name: when not a periodic CI job use the base deployment
  when:
    - not periodic|default(false)
    - not platform_rhev|default(false)
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    mkdir -p tmp
    oc kustomize base > tmp/test_deployment.yaml
    oc apply -f tmp/test_deployment.yaml
  args:
    chdir: "../config"

- name: For rhev deployed env, use RHEV customize base deployment
  when: platform_rhev|default(false)
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    mkdir -p tmp
    oc kustomize base_rhev > tmp/test_deployment_rhev.yaml
    oc apply -f tmp/test_deployment_rhev.yaml
  args:
    chdir: "../config"

- name: when periodic, create kustomize container_images_overrides.yaml
  when:
    - periodic|default(false)
    - container_registry is defined
    - container_tag is defined
    - container_namespace is defined
  block:
    - name: template out the override deployment
      ansible.builtin.template:
        src: container_overrides.j2
        dest: "../config/periodic_ci/container_image_overrides.yaml"
        mode: '644'
        force: true

    - name: run kustomize and create controlplane with container overrides
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        mkdir -p tmp
        oc kustomize periodic_ci > tmp/test_deployment.yaml
        oc apply -f tmp/test_deployment.yaml
      args:
        chdir: "../config"

- name: wait for mariadb to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get pod openstack-galera-0 -o jsonpath='{.status.phase}{"\n"}' | grep Running
  register: mariadb_running_result
  until: mariadb_running_result is success
  retries: 60
  delay: 2

- name: wait for cell1 mariadb to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get pod openstack-cell1-galera-0 -o jsonpath='{.status.phase}{"\n"}' | grep Running
  register: mariadb_running_result
  until: mariadb_running_result is success
  retries: 60
  delay: 2

- name: Patch openstack upstream dns server to set the correct value for the environment
  when: upstream_dns is defined
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    crname=$(oc get openstackcontrolplane -o name)
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/dns/template/options", "value": [{"key": "server", "values": ["{{ upstream_dns }}"]}]}]'

- name: Patch rabbitmq resources for lower resource consumption
  changed_when: false
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    crname=$(oc get openstackcontrolplane -o name)
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq/resources/requests/memory", "value": 500Mi}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/cpu", "value": 500m}]'
    oc patch ${crname} --type json \
      -p='[{"op": "replace", "path": "/spec/rabbitmq/templates/rabbitmq-cell1/resources/requests/memory", "value": 500Mi}]'
