# Get a fresh ceph_cli
- name: Get ceph_cli
  ansible.builtin.include_tasks: ceph_cli.yaml
  vars:
    ceph_fsid: "{{ mon_dump.fsid }}"
    ceph_cluster: ceph

- name: Set ceph-mgr dashboard port configuration
  # cephadm runs w/ root privileges
  become: true
  block:
    - name: Set the dashboard port
      ansible.builtin.command: |
        {{ ceph_cli }} config set mgr mgr/dashboard/server_port 8443
      changed_when: false
    - name: Set the dashboard ssl port
      ansible.builtin.command: |
        {{ ceph_cli }} config set mgr mgr/dashboard/ssl_server_port 8443
      changed_when: false
    - name: Disable mgr dashboard module (restart)
      ansible.builtin.command: |
        {{ ceph_cli }} mgr module disable dashboard
    - name: Enable mgr dashboard module (restart)
      ansible.builtin.command: |
        {{ ceph_cli }} mgr module enable dashboard

- name: Set ceph-mgr prometheus port configuration
  # cephadm runs w/ root privileges
  become: true
  block:
    - name: Set the prometheus server port
      ansible.builtin.command: |
        {{ ceph_cli }} config set mgr mgr/prometheus/server_port {{ ceph_prometheus_server_port }}
      changed_when: false
    - name: Set the prometheus server address
      ansible.builtin.command: |
        {{ ceph_cli }} config set mgr mgr/prometheus/server_addr {{ ceph_prometheus_server_addr }}
      changed_when: false
    - name: Enable prometheus module
      ansible.builtin.command: |
        {{ ceph_cli }} mgr module enable prometheus
      changed_when: false

# - Expand labels to the whole hostmap
- name: Apply Monitoring label to the overcloud nodes
  ansible.builtin.import_tasks: labels.yaml
  vars:
    nodes: "{{ hostmap.keys() | difference(decomm_nodes) }}"
    act: "add"
    labels:
      - "monitoring"

- name: MONITORING - Load Spec from the orchestrator
  ansible.builtin.set_fact:
    monitoring_stack: "{{ monitoring }}"
  vars:
    monitoring: |-
      {% set monitoring_stack = {} %}
      {% for item in servicemap %}
      {%   if (item.service_type == 'grafana') or (item.service_type == 'prometheus') or (item.service_type == 'alertmanager') %}
      {%     set cur = {} %}
      {%     set _ = cur.__setitem__('service_type', item.service_type) %}
      {%     set _ = cur.__setitem__('service_name', item.service_name) %}
      {%     set _ = cur.__setitem__('networks', item.networks) %}
      {%     set _ = cur.__setitem__('spec', item.spec) %}
      {%     set _ = monitoring_stack.__setitem__(item.service_type, cur) %}
      {%   endif %}
      {% endfor %}
      {{ monitoring_stack }}

- name: Print the loaded data
  when: debug | default(false)
  ansible.builtin.debug:
    msg: "{{ monitoring_stack }}"

# Update and apply the spec: it will update the Monitoring Stack deployment,
# and place daemons on the target nodes
- name: Update the Monitoring Stack spec definition
  when: target_nodes | length > 0
  # root privileges required to run cephadm
  # and apply the new spec
  become: true
  ceph_mkspec:
    service_type: "{% set st = item.get('service_type') %}{{ st }}"
    service_id: "{% set id = item.get('service_id') %}{{ id }}"
    service_name: "{% set nm = item.get('service_name') %}{{ nm }}"
    cluster: ceph
    apply: true
    label: "monitoring"
    count: 1
    render_path: "{{ ceph_spec_render_dir }}"
    networks: "{%  set nw = item.get('networks') %}{{ nw }}"
    spec: "{% set pt = item.get('spec') %}{{ pt }}"
  register: spc
  environment:
    CEPH_CONTAINER_IMAGE: "{{ ceph_container }}"
    CEPH_CONTAINER_BINARY: "{{ ceph_container_cli }}"
  loop:
    - "{{ grafana }}"
    - "{{ prometheus }}"
    - "{{ alertmanager }}"
  vars:
    grafana: "{% set grf = monitoring_stack.get('grafana') %}{{ grf }}"
    prometheus: "{% set prom = monitoring_stack.get('prometheus') %}{{ prom }}"
    alertmanager: "{% set alm = monitoring_stack.get('alertmanager') %}{{ alm }}"

- name: Print the resulting spec
  ansible.builtin.debug:
    msg: "{{ spc }}"
  when: debug | default(true)

# Wait for the redeploy to finish before moving to the next stage
- name: MONITORING - wait daemons
  ansible.builtin.include_tasks: wait_daemons.yaml
  vars:
    daemon: "{{ item }}"
    daemon_id:
  loop:
    - grafana
    - prometheus
    - alertmanager

- name: Sleep before moving to the next daemon
  ansible.builtin.pause:
    seconds: "{{ ceph_timeout }}"
