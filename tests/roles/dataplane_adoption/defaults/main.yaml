netconfig_networks:
  - name: ctlplane
    dnsDomain: ctlplane.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: 192.168.122.120
            start: 192.168.122.100
          - end: 192.168.122.200
            start: 192.168.122.150
        cidr: 192.168.122.0/24
        gateway: 192.168.122.1
  - name: internalapi
    dnsDomain: internalapi.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ internalapi_allocation_end | default('172.17.0.250') }}"
            start: "{{ internalapi_allocation_start | default('172.17.0.100') }}"
        cidr: "{{ internalapi_cidr | default('172.17.0.0/24') }}"
        vlan: 20
  - name: External
    dnsDomain: external.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: 10.0.0.250
            start: 10.0.0.100
        cidr: 10.0.0.0/24
        gateway: 10.0.0.1
  - name: storage
    dnsDomain: storage.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ storage_allocation_end | default('172.18.0.250') }}"
            start: "{{ storage_allocation_start | default('172.18.0.100') }}"
        cidr: "{{ storage_cidr | default('172.18.0.0/24') }}"
        vlan: 21
  - name: storagemgmt
    dnsDomain: storagemgmt.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ storagemgmt_allocation_end | default('172.20.0.250') }}"
            start: "{{ storagemgmt_allocation_start | default('172.20.0.100') }}"
        cidr: "{{ storagemgmt_cidr | default('172.20.0.0/24') }}"
        vlan: 23
  - name: tenant
    dnsDomain: tenant.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ tenant_allocation_end | default('172.19.0.250') }}"
            start: "{{ tenant_allocation_start | default('172.19.0.100') }}"
        cidr: "{{ tenant_cidr | default('172.19.0.0/24') }}"
        vlan: 22
registry_name: "quay.io"
registry_namespace: "podified-antelope-centos9"
image_tag: "current-podified"
ansible_ssh_private_key_secret: dataplane-adoption-secret
default_timesync_ntp_servers:
  - hostname: pool.ntp.org
edpm_node_hostname: standalone.localdomain
edpm_user: root
edpm_nodes:
  standalone:
    hostName: "{{ edpm_node_hostname }}"
    ansible:
      ansibleHost: "{{ edpm_node_ip }}"
    networks:
      - defaultRoute: true
        fixedIP: "{{ edpm_node_ip }}"
        name: ctlplane
        subnetName: subnet1
      - name: internalapi
        subnetName: subnet1
      - name: storage
        subnetName: subnet1
      - name: tenant
        subnetName: subnet1
      - name: storagemgmt
        subnetName: subnet1
edpm_computes: |-
  ["{{ edpm_node_hostname }}"]="{{ edpm_node_ip }}"
# The variables inside edpm_network_config_template are evaluated based
# on the OpenstackDataplaneNodeSet inventory. For adding a variable to the invetory,
# please add it to OpenstackDataplaneNodeSet.nodeTemplate.ansibleVars

edpm_bootstrap_command: |
  # This is a hack to deploy RDO Delorean repos to RHEL as if it were Centos 9 Stream
  set -euxo pipefail
  curl -sL https://github.com/openstack-k8s-operators/repo-setup/archive/refs/heads/main.tar.gz | tar -xz
  python3 -m venv ./venv
  PBR_VERSION=0.0.0 ./venv/bin/pip install ./repo-setup-main
  # This is required for FIPS enabled until trunk.rdoproject.org
  # is not being served from a centos7 host, tracked by
  # https://issues.redhat.com/browse/RHOSZUUL-1517
  dnf -y install crypto-policies
  update-crypto-policies --set FIPS:NO-ENFORCE-EMS
  ./venv/bin/repo-setup current-podified -b antelope -d centos9 --stream
  {%+ if compute_adoption|bool +%}
  # FIXME: perform dnf upgrade for other packages in EDPM ansible
  # here we only ensuring that decontainerized libvirt can start
  dnf -y upgrade openstack-selinux
  rm -f /run/virtlogd.pid
  {%+ endif +%}
  rm -rf repo-setup-main

edpm_network_config_template: |
  {%- raw %}
  ---
  {% set mtu_list = [ctlplane_mtu] %}
  {% for network in nodeset_networks %}
  {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
  {%- endfor %}
  {% set min_viable_mtu = mtu_list | max %}
  network_config:
  - type: ovs_bridge
    name: {{ neutron_physical_bridge_name }}
    mtu: {{ min_viable_mtu }}
    use_dhcp: false
    dns_servers: {{ os_net_config_dns | default(ctlplane_dns_nameservers, true) }}
    domain: {{ dns_search_domains }}
    addresses:
    - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
    routes: {{ ctlplane_host_routes if os_net_config_set_route else '[]' }}
    members:
    - type: interface
      name: {{ os_net_config_iface }}
      mtu: {{ min_viable_mtu }}
      # force the MAC address of the bridge to this interface
      primary: true
  {% for network in nodeset_networks %}
    - type: vlan
      mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
      vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
      addresses:
      - ip_netmask:
          {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
      routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
  {% endfor %}
  {% endraw %}
neutron_physical_bridge_name: br-ctlplane
neutron_public_interface_name: "{{ dataplane_public_iface | default('eth0') }}"
edpm_sshd_allowed_ranges: "{{ ['192.168.122.0/24'] if dataplane_os_net_config_set_route|default(true)|bool else ['0.0.0.0/0'] }}"
edpm_neutron_sriov_agent_enabled: true
edpm_neutron_dhcp_agent_enabled: true
nova_libvirt_backend: local
skip_patching_ansibleee_csv: false
# OS Diff automation steps
os_diff_dir: tmp/os-diff
os_diff_data_dir: tmp/os-diff
prelaunch_test_instance: true
telemetry_adoption: true
