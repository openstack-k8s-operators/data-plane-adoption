# Supported storage backends for Cinder of the target cloud
# must match those configured for the source cloud
supported_backup_backends: []
supported_volume_backends: []
edpm_networker_deploy: false
configure_ipam: true
libvirt_password: ''
netconfig_networks:
  - name: ctlplane
    dnsDomain: ctlplane.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: 192.168.122.120
            start: 192.168.122.100
          - end: 192.168.122.200
            start: 192.168.122.150
        cidr: 192.168.122.0/24
        gateway: 192.168.122.1
  - name: internalapi
    dnsDomain: internalapi.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ internalapi_allocation_end | default('172.17.0.250') }}"
            start: "{{ internalapi_allocation_start | default('172.17.0.100') }}"
        cidr: "{{ internalapi_cidr | default('172.17.0.0/24') }}"
        vlan: 20
  - name: External
    dnsDomain: external.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: 10.0.0.250
            start: 10.0.0.100
        cidr: 10.0.0.0/24
        gateway: 10.0.0.1
  - name: storage
    dnsDomain: storage.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ storage_allocation_end | default('172.18.0.250') }}"
            start: "{{ storage_allocation_start | default('172.18.0.100') }}"
        cidr: "{{ storage_cidr | default('172.18.0.0/24') }}"
        vlan: 21
  - name: storagemgmt
    dnsDomain: storagemgmt.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ storagemgmt_allocation_end | default('172.20.0.250') }}"
            start: "{{ storagemgmt_allocation_start | default('172.20.0.100') }}"
        cidr: "{{ storagemgmt_cidr | default('172.20.0.0/24') }}"
        vlan: 23
  - name: tenant
    dnsDomain: tenant.example.com
    subnets:
      - name: subnet1
        allocationRanges:
          - end: "{{ tenant_allocation_end | default('172.19.0.250') }}"
            start: "{{ tenant_allocation_start | default('172.19.0.100') }}"
        cidr: "{{ tenant_cidr | default('172.19.0.0/24') }}"
        vlan: 22
registry_name: "quay.io"
registry_namespace: "podified-antelope-centos9"
image_tag: "current-podified"
ansible_ssh_private_key_secret: dataplane-adoption-secret
default_timesync_ntp_servers:
  - hostname: pool.ntp.org
edpm_node_hostname: standalone.localdomain
edpm_user: root
edpm_nodes:
  cell1:
    standalone:
      hostName: "{{ edpm_node_hostname }}"
      ansible:
        ansibleHost: "{{ edpm_node_ip }}"
      networks:
        - defaultRoute: true
          fixedIP: "{{ edpm_node_ip }}"
          name: ctlplane
          subnetName: subnet1
        - name: internalapi
          subnetName: subnet1
        - name: storage
          subnetName: subnet1
        - name: tenant
          subnetName: subnet1
        - name: storagemgmt
          subnetName: subnet1
# The variables inside edpm_network_config_template are evaluated based
# on the OpenstackDataplaneNodeSet inventory. For adding a variable to the invetory,
# please add it to OpenstackDataplaneNodeSet.nodeTemplate.ansibleVars

edpm_bootstrap_command: |
  # This is a hack to deploy RDO Delorean repos to RHEL as if it were Centos 9 Stream
  set -euxo pipefail
  curl -sL https://github.com/openstack-k8s-operators/repo-setup/archive/refs/heads/main.tar.gz | tar -xz
  python3 -m venv ./venv
  PBR_VERSION=0.0.0 ./venv/bin/pip install ./repo-setup-main
  # This is required for FIPS enabled until trunk.rdoproject.org
  # is not being served from a centos7 host, tracked by
  # https://issues.redhat.com/browse/RHOSZUUL-1517
  dnf -y install crypto-policies
  update-crypto-policies --set FIPS:NO-ENFORCE-EMS
  ./venv/bin/repo-setup current-podified -b antelope -d centos9 --stream
  {%+ if compute_adoption|bool +%}
  # FIXME: perform dnf upgrade for other packages in EDPM ansible
  # here we only ensuring that decontainerized libvirt can start
  dnf -y upgrade openstack-selinux
  rm -f /run/virtlogd.pid
  {%+ endif +%}
  rm -rf repo-setup-main

edpm_network_config_template: |
  {%- raw %}
  ---
  {% set mtu_list = [ctlplane_mtu] %}
  {% for network in nodeset_networks %}
  {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
  {%- endfor %}
  {% set min_viable_mtu = mtu_list | max %}
  network_config:
  - type: ovs_bridge
    name: {{ neutron_physical_bridge_name }}
    mtu: {{ min_viable_mtu }}
    use_dhcp: false
    dns_servers: {{ os_net_config_dns | default(ctlplane_dns_nameservers, true) }}
    domain: {{ dns_search_domains }}
    addresses:
    - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
    routes: {{ ctlplane_host_routes if os_net_config_set_route else '[]' }}
    members:
    - type: interface
      name: {{ os_net_config_iface }}
      mtu: {{ min_viable_mtu }}
      # force the MAC address of the bridge to this interface
      primary: true
  {% for network in nodeset_networks %}
    - type: vlan
      mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
      vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
      addresses:
      - ip_netmask:
          {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
      routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
  {% endfor %}
  {% endraw %}
neutron_physical_bridge_name: br-ctlplane
neutron_public_interface_name: "{{ dataplane_public_iface | default('eth0') }}"
edpm_sshd_allowed_ranges: "{{ ['192.168.122.0/24'] if dataplane_os_net_config_set_route|default(true)|bool else ['0.0.0.0/0'] }}"
edpm_neutron_sriov_agent_enabled: true
edpm_neutron_dhcp_agent_enabled: true
nova_libvirt_backend: local
skip_patching_ansibleee_csv: false
# OS Diff automation steps
os_diff_dir: tmp/os-diff
os_diff_data_dir: tmp/os-diff
prelaunch_test_instance: true
telemetry_adoption: true

dataplane_cr: |
  apiVersion: dataplane.openstack.org/v1beta1
  kind: OpenStackDataPlaneNodeSet
  metadata:
    name: openstack-cell1
  spec:
    tlsEnabled: {{ enable_tlse }}
    networkAttachments:
      - ctlplane
    preProvisioned: true
    services:
      - bootstrap
      - download-cache
      - configure-network
      - validate-network
      - install-os
      - configure-os
      - ssh-known-hosts
      - run-os
      - reboot-os
      - install-certs
      - ovn
      - neutron-metadata
      {%+ if compute_adoption|bool +%}
      - libvirt
      - nova
      {%+ endif +%}
      {% if telemetry_adoption|bool +%}
      - telemetry
      {%+ endif +%}
    env:
      - name: ANSIBLE_CALLBACKS_ENABLED
        value: "ansible.posix.profile_tasks,yaml"
      - name: ANSIBLE_FORCE_COLOR
        value: "True"
      - name: ANSIBLE_DISPLAY_ARGS_TO_STDOUT
        value: "True"
      - name: ANSIBLE_SSH_ARGS
        value: "-C -o ControlMaster=auto -o ControlPersist=80s"
      - name: ANSIBLE_VERBOSITY
        value: "{{ dataplane_verbosity | default ('1') }}"
    nodes: {{ edpm_nodes["cell1"] | default(edpm_nodes) }}
    nodeTemplate:
      ansibleSSHPrivateKeySecret: {{ ansible_ssh_private_key_secret }}
      ansible:
        ansibleUser: {{ edpm_user }}
        ansibleVars:
          edpm_bootstrap_release_version_package: []
          os_net_config_iface: {{ dataplane_os_net_config_iface | default ('nic1') }}
          os_net_config_set_route: {{ dataplane_os_net_config_set_route | default(true) | bool }}
          # Don't cleanup if os-net-config is not setting all networks and routes
          edpm_network_config_nonconfigured_cleanup: "{{ dataplane_os_net_config_set_route | default(true) | bool }}"
          os_net_config_dns: {{ dataplane_os_net_config_dns | default("") }}
          edpm_bootstrap_command: |
            {{ edpm_bootstrap_command| indent(10) }}

          # edpm_network_config
          # nic config template for a EDPM compute node
          edpm_network_config_template: |
            {{ edpm_network_config_template| indent(10) }}

          edpm_network_config_hide_sensitive_logs: false
          #
          # These vars are for the network config templates themselves and are
          # considered EDPM network defaults.
          neutron_physical_bridge_name: {{ neutron_physical_bridge_name }}
          neutron_public_interface_name: {{ neutron_public_interface_name }}

          # edpm_nodes_validation
          edpm_nodes_validation_validate_controllers_icmp: false
          edpm_nodes_validation_validate_gateway_icmp: false

          timesync_ntp_servers: {{ timesync_ntp_servers | default(default_timesync_ntp_servers) }}

          edpm_ovn_controller_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ovn-controller:{{ image_tag }}"
          edpm_iscsid_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-iscsid:{{ image_tag }}"
          edpm_logrotate_crond_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-cron:{{ image_tag }}"
          edpm_nova_compute_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-compute:{{ image_tag }}"
          edpm_nova_libvirt_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-libvirt:{{ image_tag }}"
          edpm_ovn_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"
          {% if telemetry_adoption|bool +%}
          edpm_telemetry_ceilometer_compute_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ceilometer-compute:{{ image_tag }}"
          edpm_telemetry_ceilometer_ipmi_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ceilometer-ipmi:{{ image_tag }}"
          {%+ endif +%}
          edpm_neutron_sriov_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-sriov-agent:{{ image_tag }}"
          edpm_neutron_ovn_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-ovn-agent:{{ image_tag }}"
          edpm_neutron_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"
          edpm_neutron_dhcp_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-dhcp-agent:{{ image_tag }}"
          edpm_multipathd_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-multipathd:{{ image_tag }}"
          {% if edpm_telemetry_node_exporter_image is defined -%}
          edpm_telemetry_node_exporter_image: "{{ edpm_telemetry_node_exporter_image }}"
          {% endif %}
          {%- if edpm_container_registry_logins is defined -%}
          edpm_container_registry_logins:
            {% for login, value in edpm_container_registry_logins.items() -%}
            {{ login | indent(10) }}:
              {{ value | to_nice_yaml | trim }}
            {% endfor -%}
          {% endif %}

          gather_facts: false
          # edpm firewall, change the allowed CIDR if needed
          edpm_sshd_configure_firewall: true
          edpm_sshd_allowed_ranges: {{ edpm_sshd_allowed_ranges }}

          {% if edpm_container_registry_insecure_registries is defined -%}
          edpm_container_registry_insecure_registries: {{ edpm_container_registry_insecure_registries }}
          {% endif -%}

          # Do not attempt OVS major upgrades here
          edpm_ovs_packages:
          - openvswitch3.3

          {% if use_hugepages|bool +%}
          edpm_default_mounts:
            - path: /dev/hugepages2M
              opts: pagesize=2M
              fstype: hugetlbfs
              group: hugetlbfs
          {%+ endif +%}

          # ovn-controller settings
          edpm_ovn_bridge_mappings: ["datacentre:{{ neutron_physical_bridge_name }}"]
          edpm_ovn_bridge: br-int
          edpm_ovn_encap_type: geneve
          ovn_monitor_all: true
          edpm_ovn_remote_probe_interval: 60000
          edpm_ovn_ofctrl_wait_before_clear: 8000

dpa_dir: "../.."
dpa_tests_dir: "{{ dpa_dir }}/tests"

# ospdo env:
# Whether source env is OSPD Director Operator
# i.e. https://github.com/openstack-k8s-operators/osp-director-operator
ospdo_src: false
# rhoso namespace
rhoso_namespace: "openstack"
# director operator namespace
org_namespace: "ospdo_openstack"
# adoption repo default location

networker_cr: |
  apiVersion: dataplane.openstack.org/v1beta1
  kind: OpenStackDataPlaneNodeSet
  metadata:
    name: openstack-networker
  spec:
    tlsEnabled: {{ enable_tlse }}
    networkAttachments:
      - ctlplane
    preProvisioned: true
    services:
      - bootstrap
      - download-cache
      - configure-network
      - validate-network
      - install-os
      - configure-os
      - ssh-known-hosts
      - run-os
      - reboot-os
      - install-certs
      - ovn
      - neutron-metadata
    env:
      - name: ANSIBLE_CALLBACKS_ENABLED
        value: "ansible.posix.profile_tasks,yaml"
      - name: ANSIBLE_FORCE_COLOR
        value: "True"
      - name: ANSIBLE_DISPLAY_ARGS_TO_STDOUT
        value: "True"
      - name: ANSIBLE_SSH_ARGS
        value: "-C -o ControlMaster=auto -o ControlPersist=80s"
      - name: ANSIBLE_VERBOSITY
        value: "{{ dataplane_verbosity | default ('1') }}"
    nodes: {{ edpm_nodes_networker }}
    nodeTemplate:
      ansibleSSHPrivateKeySecret: {{ ansible_ssh_private_key_secret }}
      ansible:
        ansibleUser: {{ edpm_user }}
        ansibleVars:
          edpm_bootstrap_release_version_package: []
          os_net_config_iface: {{ dataplane_os_net_config_iface | default ('nic1') }}
          os_net_config_set_route: {{ dataplane_os_net_config_set_route | default(true) | bool }}
          # Don't cleanup if os-net-config is not setting all networks and routes
          edpm_network_config_nonconfigured_cleanup: "{{ dataplane_os_net_config_set_route | default(true) | bool }}"
          os_net_config_dns: {{ dataplane_os_net_config_dns | default("") }}
          edpm_bootstrap_command: |
            {{ edpm_bootstrap_command| indent(10) }}
          # edpm_network_config
          # nic config template for a EDPM compute node
          edpm_network_config_template: |
            {{ edpm_network_config_template| indent(10) }}
          edpm_network_config_hide_sensitive_logs: false
          #
          # These vars are for the network config templates themselves and are
          # considered EDPM network defaults.
          neutron_physical_bridge_name: {{ neutron_physical_bridge_name }}
          neutron_public_interface_name: {{ neutron_public_interface_name }}
          # edpm_nodes_validation
          edpm_nodes_validation_validate_controllers_icmp: false
          edpm_nodes_validation_validate_gateway_icmp: false
          timesync_ntp_servers: {{ timesync_ntp_servers | default(default_timesync_ntp_servers) }}
          edpm_ovn_controller_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ovn-controller:{{ image_tag }}"
          edpm_iscsid_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-iscsid:{{ image_tag }}"
          edpm_logrotate_crond_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-cron:{{ image_tag }}"
          edpm_ovn_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"
          edpm_neutron_ovn_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-ovn-agent:{{ image_tag }}"
          edpm_neutron_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"
          edpm_neutron_dhcp_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-dhcp-agent:{{ image_tag }}"
          edpm_multipathd_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-multipathd:{{ image_tag }}"
          gather_facts: false
          # edpm firewall, change the allowed CIDR if needed
          edpm_sshd_configure_firewall: true
          edpm_sshd_allowed_ranges: {{ edpm_sshd_allowed_ranges }}
          # Do not attempt OVS major upgrades here
          edpm_ovs_packages:
          - openvswitch3.3
          # ovn-controller settings
          edpm_ovn_bridge_mappings: ["datacentre:{{ neutron_physical_bridge_name }}"]
          edpm_ovn_bridge: br-int
          edpm_ovn_encap_type: geneve
          ovn_monitor_all: true
          edpm_ovn_remote_probe_interval: 60000
          edpm_ovn_ofctrl_wait_before_clear: 8000
          edpm_enable_chassis_gw: true
