- name: set shell vars for edpm adoption
  no_log: "{{ use_no_log }}"
  when:
    - ('ceph' in [nova_libvirt_backend])
  ansible.builtin.set_fact:
    ceph_backend_configuration_fsid_shell_vars: |
      CEPH_FSID=$(oc get secret ceph-conf-files -o json | jq -r '.data."ceph.conf"' | base64 -d | grep fsid | sed -e 's/fsid = //')

- name: Save ansibleee-operator pod name to be able to wait for the rollout of the new pod
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get -n openstack-operators pod -l app.kubernetes.io/name=openstack-ansibleee-operator -o name
  register: old_ansibleee_operator_pod

- name: use ansible-runner image built from source or latest if none is defined
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ oc_login_command }}
    # openstack-operator catalog pins the sha256, which might differ from latest with time
    oc patch csv -n openstack-operators openstack-ansibleee-operator.v0.0.1 \
      --type='json' -p='[{
      "op":"replace", "path":"/spec/install/spec/deployments/0/spec/template/spec/containers/1/env/0",
      "value": {"name": "RELATED_IMAGE_ANSIBLEEE_IMAGE_URL_DEFAULT", "value": "{{ ansibleee_runner_img | default('quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest')}}"}}]'
  register: ansibleee_csv_patched

- name: Wait for the ansible-operator to restart with the new ENV
  no_log: "{{ use_no_log }}"
  when: '"no change" not in ansibleee_csv_patched.stdout'
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait -n openstack-operators --timeout=120s --for=delete {{ old_ansibleee_operator_pod.stdout }}

- name: ensure namespace
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc project openstack

- name: Include RHEV vars
  ansible.builtin.include_vars:
    file: rhev.yaml
  when: platform_rhev|default(false)

- name: ensure IPAM is configured
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: network.openstack.org/v1beta1
    kind: NetConfig
    metadata:
      name: netconfig
    spec:
      networks: {{ netconfig_networks }}
    EOF

- name: Slurp the private key
  no_log: "{{ use_no_log }}"
  ansible.builtin.slurp:
    path: "{{ edpm_privatekey_path }}"
  register: edpm_privatekey
  when: edpm_encoded_privatekey is undefined

# Remove this when https://code.engineering.redhat.com/gerrit/q/topic:stable-compute-uuid
# is released in 17.1.3. note that we use 42436:42436 as the nova user and group may not have
# been created yet, and we need to ensure the file is owned by the correct user and group
- name: Temporary fix to ensure stable compute UUID
  block:
    - name: ensure SSH key
      ansible.builtin.copy:
        dest: /tmp/ansible_private_key
        content: "{{ edpm_encoded_privatekey | default(edpm_privatekey.content) | b64decode }}"
        mode: "0600"
      when: edpm_privatekey_path is undefined

    - name: populate compute_id file
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        declare -A computes
        computes=(
          {{ edpm_computes }}
        )

        for name in "${!computes[@]}";
        do
          uuid=$(\
            oc exec -t openstackclient -- \
              openstack hypervisor show $name \
              -f value -c 'id'\
          )

          echo "Writing $uuid to /var/lib/nova/compute_id on $name"
          ssh \
            -i {{ edpm_privatekey_path | default("/tmp/ansible_private_key") }} \
            {{ edpm_user }}@"${computes[$name]}" \
            "grep -qF $uuid /var/lib/nova/compute_id || (echo $uuid | sudo tee /var/lib/nova/compute_id && sudo chown 42436:42436 /var/lib/nova/compute_id && sudo chcon -t container_file_t /var/lib/nova/compute_id)"
        done

- name: create dataplane-adoption-secret.yaml
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
        name: dataplane-adoption-secret
    data:
        ssh-privatekey: "{{ edpm_encoded_privatekey | default(edpm_privatekey.content) }}"
    EOF

- name: generate an ssh key-pair nova-migration-ssh-key secret
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd "$(mktemp -d)"
    ssh-keygen -f ./id -t ecdsa-sha2-nistp521 -N ''
    oc get secret nova-migration-ssh-key || oc create secret generic nova-migration-ssh-key \
    -n openstack \
    --from-file=ssh-privatekey=id \
    --from-file=ssh-publickey=id.pub \
    --type kubernetes.io/ssh-auth
    rm -f id*
    cd -

- name: create a Nova Compute Extra Config service (no ceph backend in use)
  when:
    - ('ceph' not in [nova_libvirt_backend])
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    data:
      19-nova-compute-cell1-workarounds.conf: |
        [workarounds]
        disable_compute_service_check_for_ffu=true
    ---
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneService
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    spec:
      label: nova.compute.extraconfig
      configMaps:
        - nova-compute-extraconfig
      secrets:
        - nova-cell1-compute-config
        - nova-migration-ssh-key
      playbook: osp.edpm.nova
    {% if enable_tlse %}
      tlsCert:
        contents:
          - dnsnames
          - ips
        networks:
          - ctlplane
        issuer: osp-rootca-issuer-internal
      caCerts: combined-ca-bundle
    {% endif %}
    EOF

- name: create a Nova Compute Extra Config service (with ceph backend)
  when:
    - ('ceph' in [nova_libvirt_backend])
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ceph_backend_configuration_fsid_shell_vars }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    data:
      19-nova-compute-cell1-workarounds.conf: |
        [workarounds]
        disable_compute_service_check_for_ffu=true
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ceph-nova
      namespace: openstack
    data:
      03-ceph-nova.conf: |
        [libvirt]
        images_type=rbd
        images_rbd_pool=vms
        images_rbd_ceph_conf=/etc/ceph/ceph.conf
        images_rbd_glance_store_name=default_backend
        images_rbd_glance_copy_poll_interval=15
        images_rbd_glance_copy_timeout=600
        rbd_user=openstack
        rbd_secret_uuid=$CEPH_FSID
    ---
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneService
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    spec:
      label: nova.compute.extraconfig
      configMaps:
        - nova-compute-extraconfig
        - ceph-nova
      secrets:
        - nova-cell1-compute-config
        - nova-migration-ssh-key
      playbook: osp.edpm.nova
    EOF

- name: Create OpenStackDataPlaneNodeSet
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneNodeSet
    metadata:
      name: openstack
    spec:
      tlsEnabled: {{ enable_tlse }}
      networkAttachments:
        - ctlplane
      preProvisioned: true
      services:
        - bootstrap
        - download-cache
        - configure-network
        - validate-network
        - install-os
        - configure-os
        - ssh-known-hosts
        - run-os
        - install-certs
        - libvirt
        - nova-compute-extraconfig
        - ovn
        - neutron-metadata
      env:
        - name: ANSIBLE_CALLBACKS_ENABLED
          value: "profile_tasks"
        - name: ANSIBLE_FORCE_COLOR
          value: "True"
        - name: ANSIBLE_VERBOSITY
          value: "{{ dataplane_verbosity | default ('3') }}"
      nodes: {{ edpm_nodes }}
      nodeTemplate:
        ansibleSSHPrivateKeySecret: {{ ansible_ssh_private_key_secret }}
        ansible:
          ansibleUser: {{ edpm_user }}
          ansibleVars:
            os_net_config_iface: {{ dataplane_os_net_config_iface | default ('nic1') }}
            os_net_config_set_route: {{ dataplane_os_net_config_set_route | default(true) | bool }}
            os_net_config_dns: {{ dataplane_os_net_config_dns | default("") }}
            service_net_map:
              nova_api_network: internalapi
              nova_libvirt_network: internalapi

            edpm_bootstrap_command: |
              # This is a hack to deploy RDO Delorean repos to RHEL as if it were Centos 9 Stream
              set -euxo pipefail
              curl -sL https://github.com/openstack-k8s-operators/repo-setup/archive/refs/heads/main.tar.gz | tar -xz
              python3 -m venv ./venv
              PBR_VERSION=0.0.0 ./venv/bin/pip install ./repo-setup-main
              # This is required for FIPS enabled until trunk.rdoproject.org
              # is not being served from a centos7 host, tracked by
              # https://issues.redhat.com/browse/RHOSZUUL-1517
              dnf -y install crypto-policies
              update-crypto-policies --set FIPS:NO-ENFORCE-EMS
              # FIXME: perform dnf upgrade for other packages in EDPM ansible
              # here we only ensuring that decontainerized libvirt can start
              ./venv/bin/repo-setup current-podified -b antelope -d centos9 --stream
              dnf -y upgrade openstack-selinux
              rm -f /run/virtlogd.pid
              rm -rf repo-setup-main

            # edpm_network_config
            # nic config template for a EDPM compute node
            edpm_network_config_template: |
              {{ edpm_network_config_template| indent(10) }}

            edpm_network_config_hide_sensitive_logs: false
            #
            # These vars are for the network config templates themselves and are
            # considered EDPM network defaults.
            neutron_physical_bridge_name: {{ neutron_physical_bridge_name }}
            neutron_public_interface_name: {{ neutron_public_interface_name }}

            # edpm_nodes_validation
            edpm_nodes_validation_validate_controllers_icmp: false
            edpm_nodes_validation_validate_gateway_icmp: false

            timesync_ntp_servers: {{ timesync_ntp_servers | default(default_timesync_ntp_servers) }}

            edpm_ovn_controller_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ovn-controller:{{ image_tag }}"
            edpm_iscsid_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-iscsid:{{ image_tag }}"
            edpm_logrotate_crond_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-cron:{{ image_tag }}"
            edpm_nova_compute_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-compute:{{ image_tag }}"
            edpm_nova_libvirt_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-libvirt:{{ image_tag }}"
            edpm_ovn_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"

            gather_facts: false
            enable_debug: false
            # edpm firewall, change the allowed CIDR if needed
            edpm_sshd_configure_firewall: true
            edpm_sshd_allowed_ranges: {{ edpm_sshd_allowed_ranges }}
            # SELinux module
            edpm_selinux_mode: enforcing

            # Do not attempt OVS 3.2 major upgrades here
            edpm_ovs_packages:
            - openvswitch3.1

            # ovn-controller settings
            edpm_ovn_bridge_mappings: ["datacentre:{{ neutron_physical_bridge_name }}"]
            edpm_ovn_bridge: br-int
            edpm_ovn_encap_type: geneve
            ovn_match_northd_version: false
            ovn_monitor_all: true
            edpm_ovn_remote_probe_interval: 60000
            edpm_ovn_ofctrl_wait_before_clear: 8000
    EOF

# TODO: Apply the ceph backend config for Cinder in the original openstack CR, via kustomize
- name: prepare adopted EDPM workloads to use Ceph backend for Cinder, if configured so
  no_log: "{{ use_no_log }}"
  when: cinder_volume_backend == "ceph" or cinder_backup_backend == "ceph"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch osdpns/openstack --type=merge --patch "
    spec:
      services:
        - bootstrap
        - download-cache
        - configure-network
        - validate-network
        - install-os
        - configure-os
        - run-os
        - install-certs
        - ceph-client
        - libvirt
        - nova-compute-extraconfig
        - ovn
        - neutron-metadata
      nodeTemplate:
        extraMounts:
        - extraVolType: Ceph
          volumes:
          - name: ceph
            secret:
              secretName: ceph-conf-files
          mounts:
          - name: ceph
            mountPath: "/etc/ceph"
            readOnly: true
    "

- name: set neutron-sriov-nic-agent configuration in the OpenStackDataPlaneNodeSet CR
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackdataplanenodeset openstack --type='json' --patch='[
      {
        "op": "add",
        "path": "/spec/services/-",
        "value": "neutron-sriov"
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_physical_device_mappings",
        "value": "dummy_sriov_net:dummy-dev"
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_resource_provider_bandwidths",
        "value": ""
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_resource_provider_hypervisors",
        "value": ""
      }]'
  when: edpm_neutron_sriov_agent_enabled|bool

- name: set neutron-dhcp configuration in the OpenStackDataPlaneNodeSet CR
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackdataplanenodeset openstack --type='json' --patch='[
      {
        "op": "add",
        "path": "/spec/services/-",
        "value": "neutron-dhcp"
      }]'
  when: edpm_neutron_dhcp_agent_enabled|bool

- name: Run pre-adoption validation
  when: run_pre_adoption_validation|bool
  block:
    - name: Create OpenStackDataPlaneService/pre-adoption-validation
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneService
        metadata:
          name: pre-adoption-validation
        spec:
          playbook: osp.edpm.pre_adoption_validation
        EOF

    - name: Create OpenStackDataPlaneDeployment to run the validation only
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneDeployment
        metadata:
          name: openstack-pre-adoption
        spec:
          nodeSets:
          - openstack
          servicesOverride:
          - pre-adoption-validation
        EOF

    - name: Wait for the validation deployment to finish
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}

        DEPLOYMENT_NAME=openstack-pre-adoption
        TRIES=180
        DELAY=10
        ALLOWED_JOB_RETRIES=1

        for i in $(seq $TRIES)
        do
            ready=$(oc get osdpd/$DEPLOYMENT_NAME -o jsonpath='{.status.conditions[0].status}')
            if [ "$ready" == "True" ]; then
                echo "Pre adoption validation Deployment is Ready"
                exit 0
            else
                failed=$(oc get jobs -l openstackdataplanedeployment=$DEPLOYMENT_NAME -o jsonpath="{.items[?(@.status.failed > $ALLOWED_JOB_RETRIES)].metadata.name}")
                if [ ! -z "${failed}" ]; then
                    echo "There are failed AnsibleEE jobs: $failed"
                    exit 1
                fi
            fi

        sleep $DELAY
        done

        echo "Run out of retries"
        exit 2

- name: deploy the dataplane deployment
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneDeployment
    metadata:
      name: openstack
    spec:
      nodeSets:
      - openstack
    EOF

- name: wait for dataplane node set to be ready
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}

    DEPLOYMENT_NAME=openstack
    TRIES=360
    DELAY=30
    ALLOWED_JOB_RETRIES=3

    for i in $(seq $TRIES)
    do
        ready=$(oc get osdpd/$DEPLOYMENT_NAME -o jsonpath='{.status.conditions[0].status}')
        if [ "$ready" == "True" ]; then
            echo "Deployment is Ready"
            exit 0
        else
            failed=$(oc get jobs -l openstackdataplanedeployment=$DEPLOYMENT_NAME -o jsonpath="{.items[?(@.status.failed > $ALLOWED_JOB_RETRIES)].metadata.name}")
            if [ ! -z "${failed}" ]; then
                echo "There are failed AnsibleEE jobs: $failed"
                exit 1
            fi
        fi

    sleep $DELAY
    done

    echo "Run out of retries"
    exit 2

  register: osdpd_running_result

- name: Complete Nova services Wallaby->Antelope FFU
  ansible.builtin.include_tasks:
    file: nova_ffu.yaml

- name: Adopted Nova FFU post-checks
  ansible.builtin.include_tasks:
    file: nova_verify.yaml

- name: Adopted Neutron and OVN agents post-checks
  ansible.builtin.include_tasks:
    file: neutron_verify.yaml
