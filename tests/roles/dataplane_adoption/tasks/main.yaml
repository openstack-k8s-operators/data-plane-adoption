- name: set shell vars for edpm adoption
  no_log: "{{ use_no_log }}"
  when:
    - ('ceph' in [nova_libvirt_backend])
  ansible.builtin.set_fact:
    ceph_backend_configuration_fsid_shell_vars: |
      CEPH_FSID=$(oc get secret ceph-conf-files -o json | jq -r '.data."ceph.conf"' | base64 -d | grep fsid | sed -e 's/fsid = //')

# FIXME: missing docs coverage?
- name: Patch openstackversion to use image built from source or latest if none is defined
  when: not skip_patching_ansibleee_csv | bool
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackversion openstack \
      --type='json' -p='[{
      "op":"replace", "path":"/spec/customContainerImages/ansibleeeImage",
      "value": "{{ ansibleee_runner_img | default('quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest')}}"}]'

- name: Include RHEV vars
  ansible.builtin.include_vars:
    file: rhev.yaml
  when: platform_rhev|default(false)

- name: Include OSPdO vars
  ansible.builtin.include_vars:
    file: ospdo.yaml
  when: ospdo_src| bool

- name: ensure IPAM is configured
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: network.openstack.org/v1beta1
    kind: NetConfig
    metadata:
      name: netconfig
    spec:
      networks: {{ netconfig_networks }}
    EOF
  when: configure_ipam | bool

- name: Slurp the private key
  no_log: "{{ use_no_log }}"
  ansible.builtin.slurp:
    path: "{{ edpm_privatekey_path }}"
  register: edpm_privatekey
  when: edpm_encoded_privatekey is undefined

- name: execute alternative tasks when source env is ODPdO
  ansible.builtin.include_tasks: ospdo_dataplane.yaml
  when: ospdo_src| bool

- name: create dataplane-adoption-secret.yaml
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
        name: dataplane-adoption-secret
    data:
        ssh-privatekey: "{{ edpm_encoded_privatekey | default(edpm_privatekey.content) }}"
    EOF
  when: not ospdo_src| bool

- name: generate an ssh key-pair nova-migration-ssh-key secret
  when: compute_adoption|bool
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd "$(mktemp -d)"
    ssh-keygen -f ./id -t ecdsa-sha2-nistp521 -N ''
    oc get secret nova-migration-ssh-key || oc create secret generic nova-migration-ssh-key \
    --from-file=ssh-privatekey=id \
    --from-file=ssh-publickey=id.pub \
    --type kubernetes.io/ssh-auth
    rm -f id*
    cd -

- name: create libvirt-secret
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
        name: libvirt-secret
    type: Opaque
    data:
      LibvirtPassword: {{ libvirt_password | b64encode }}
    EOF
  when:
    - not ospdo_src| bool
    - libvirt_password | length > 0

- name: create a configuration map which should become common for all cells (local storage back end)
  when:
    - compute_adoption|bool
    - ('ceph' not in [nova_libvirt_backend])
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nova-cells-global-config
    data:
      99-nova-compute-cells-workarounds.conf: |
        [workarounds]
        disable_compute_service_check_for_ffu=true
    EOF

- name: create a configuration map which should become common for all cells (Ceph storage back end)
  when:
    - compute_adoption|bool
    - ('ceph' in [nova_libvirt_backend])
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ceph_backend_configuration_fsid_shell_vars }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nova-cells-global-config
    data:
      99-nova-compute-cells-workarounds.conf: |
        [workarounds]
        disable_compute_service_check_for_ffu=true
      03-ceph-nova.conf: |
        [libvirt]
        images_type=rbd
        images_rbd_pool=vms
        images_rbd_ceph_conf=/etc/ceph/ceph.conf
        images_rbd_glance_store_name=default_backend
        images_rbd_glance_copy_poll_interval=15
        images_rbd_glance_copy_timeout=600
        rbd_user=openstack
        rbd_secret_uuid=$CEPH_FSID
    EOF

- name: create dataplane services for Nova cells to enable pre-upgrade workarounds
  when:
    - compute_adoption|bool
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ cells_env }}

    for CELL in $(echo $RENAMED_CELLS); do
      oc apply -f - <<EOF
    ---
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneService
    metadata:
      name: nova-$CELL
    spec:
      dataSources:
        - secretRef:
            name: nova-$CELL-compute-config
        - secretRef:
            name: nova-migration-ssh-key
        - configMapRef:
            name: nova-cells-global-config
      playbook: osp.edpm.nova
      caCerts: combined-ca-bundle
      edpmServiceType: nova
      containerImageFields:
      - NovaComputeImage
      - EdpmIscsidImage
    EOF
    done

# FIXME(bogdando): align docs and tests (nodeTemplate uses jinja2, ansible vars, is fell far behind that we have in docs)
- name: Create the dataplane node sets definitions for each cell
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ nodesets_env }}

    declare -A names
    for CELL in $(echo $RENAMED_CELLS); do
      ref="COMPUTES_$(echo ${CELL}|tr '[:lower:]' '[:upper:]')"
      eval names=\${!${ref}[@]}
      ref_api="COMPUTES_API_$(echo ${CELL}|tr '[:lower:]' '[:upper:]')"
      [ -z "$names" ] && continue
      ind=0
      rm -f computes-$CELL
      for compute in $names; do
        ip="${ref}['$compute']"
        ip_api="${ref_api}['$compute']"
        cat >> computes-$CELL << EOF
        ${compute}:
          hostName: $compute
          ansible:
            ansibleHost: $compute
          networks:
          - defaultRoute: true
            fixedIP: ${!ip}
            name: ctlplane
            subnetName: subnet1
          - name: internalapi
            subnetName: subnet1
            fixedIP: ${!ip_api}
          - name: storage
            subnetName: subnet1
          - name: tenant
            subnetName: subnet1
    EOF
        ind=$(( ind + 1 ))
      done

      test -f computes-$CELL || continue
      cat > nodeset-${CELL}.yaml <<EOF
    {{ dataplane_cr}}
    EOF
      #cat computes-$CELL >> nodeset-${CELL}.yaml
    done
  # NOTE(bogdando): omit computes-$CELL insertion as that is a manual operation only needed by docs.
  # Those files are created here only to provide testing coverage of the commands provided in docs.
  # Their contents is irrelevant as the real values come from edpm_nodes, by the below task.
  # NOTE(bogdando): Assume cell1 must always have at least an only compute node. That is for backwards compatibility with scenarios not aware of multiple cells.

- name: update EDPM nodes data in nodes sets of cells
  no_log: "{{ use_no_log }}"
  when:
    - compute_adoption|bool
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ cells_env }}
    {% if 'cell1' not in edpm_nodes %}
    {% set edpm_nodes_real = {'cell1': edpm_nodes} %}
    {% else %}
    {% set edpm_nodes_real = edpm_nodes %}
    {% endif %}

    {% for cell in renamed_cells %}
    {% if cell in edpm_nodes_real %}
    cat > computes-real-{{ cell }} << EOF
    {% filter indent(width=4) %}
        {{ edpm_nodes_real[cell] | default([]) | to_yaml(indent=2) }}
    {% endfilter %}
    EOF
    cat computes-real-{{ cell }} >> nodeset-{{ cell }}.yaml
    {% endif %}
    {% endfor %}

- name: Create OpenStackDataPlaneNodeSet_networker
  when: edpm_nodes_networker is defined or edpm_networker_deploy
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    cat <<EOF > edpm-crd-networker.yaml
    {{ networker_cr }}
    EOF

# FIXME: this is different in docs, need to align with tests
# FIXME(bogdando): get ovs_external_ids.json data for multiple node sets
- name: check ovs external-ids with os-diff before deployment
  failed_when: false
  tags: pull_openstack_configuration
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ cells_env }}
    for CELL in $(echo $RENAMED_CELLS); do
      test -f nodeset-${CELL}.yaml || continue
      {{ os_diff_dir }}/os-diff diff {{ os_diff_data_dir }}/tripleo/ovs_external_ids/standalone/ovs_external_ids.json nodeset-${CELL}.yaml --crd --service ovs_external_ids -f ${PWD}/{{ os_diff_dir }}/config.yaml
    done

- name: deploy the OpenStackDataPlaneNodeSet CRs for each Nova compute cell
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ cells_env }}

    for CELL in $(echo $RENAMED_CELLS); do
      test -f nodeset-${CELL}.yaml || continue
      oc apply -f nodeset-${CELL}.yaml
    done

    {%+ if edpm_nodes_networker is defined or edpm_networker_deploy +%}
    cat edpm-crd-networker.yaml | oc apply -f -
    {%+ endif +%}

# TODO(bogdando): Apply the ceph backend config for Cinder in the original openstack CR, via kustomize perhaps?
- name: prepare the adopted data plane workloads to use Ceph backend for Cinder, if configured so
  no_log: "{{ use_no_log }}"
  when:
    - compute_adoption|bool
    - cinder_volume_backend == "ceph" or cinder_backup_backend == "ceph" or ('ceph' in [nova_libvirt_backend])
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ cells_env }}

    for CELL in $(echo $RENAMED_CELLS); do
      test -f nodeset-${CELL}.yaml || continue
      oc patch osdpns/openstack-$CELL --type=merge --patch "
      spec:
        services:
          - bootstrap
          - download-cache
          - configure-network
          - validate-network
          - install-os
          - configure-os
          - ssh-known-hosts
          - run-os
          - reboot-os
          - install-certs
          - ceph-client
          - ovn
          - neutron-metadata
          - libvirt
          - nova-$CELL
          {% if telemetry_adoption|bool +%}
          - telemetry
          {%+ endif +%}
        nodeTemplate:
          extraMounts:
          - extraVolType: Ceph
            volumes:
            - name: ceph
              secret:
                secretName: ceph-conf-files
            mounts:
            - name: ceph
              mountPath: "/etc/ceph"
              readOnly: true
      "
    done

- name: enable neutron-sriov-nic-agent in the OpenStackDataPlaneNodeSet CR
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ cells_env }}

    for CELL in $(echo $RENAMED_CELLS); do
      test -f nodeset-${CELL}.yaml || continue
      oc patch openstackdataplanenodeset openstack-$CELL --type='json' --patch='[
      {
        "op": "add",
        "path": "/spec/services/-",
        "value": "neutron-sriov"
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_physical_device_mappings",
        "value": "dummy_sriov_net:dummy-dev"
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_resource_provider_bandwidths",
        "value": ""
      }, {
        "op": "add",
        "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_neutron_sriov_agent_SRIOV_NIC_resource_provider_hypervisors",
        "value": ""
      }]'
    done
  when:
    - edpm_neutron_sriov_agent_enabled|bool
    - compute_adoption|bool

- name: enable neutron-dhcp in the OpenStackDataPlaneNodeSet CR
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ cells_env }}

    for CELL in $(echo $RENAMED_CELLS); do
      test -f nodeset-${CELL}.yaml || continue
      oc patch openstackdataplanenodeset openstack-$CELL --type='json' --patch='[
      {
        "op": "add",
        "path": "/spec/services/-",
        "value": "neutron-dhcp"
      }]'
    done
  when: edpm_neutron_dhcp_agent_enabled|bool

- name: Run the pre-adoption validation
  when: run_pre_adoption_validation|bool
  block:
    - name: create the validation service
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneService
        metadata:
          name: pre-adoption-validation
        spec:
          playbook: osp.edpm.pre_adoption_validation
        EOF

    - name: create a OpenStackDataPlaneDeployment CR that runs only the validation
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ nodesets_env_oc }}

        {%+ if edpm_nodes_networker is defined or edpm_networker_deploy +%}
        NODESETS="${NODESETS%]*},openstack-networker]"
        {%+ endif +%}

        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneDeployment
        metadata:
          name: openstack-pre-adoption
        spec:
          nodeSets: $NODESETS
          servicesOverride:
          - pre-adoption-validation
          backoffLimit: 1
        EOF

    # FIXME: this is different in docs, need to align with tests
    - name: Wait for the validation deployment to finish
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}

        DEPLOYMENT_NAME=openstack-pre-adoption
        TRIES=180
        DELAY=10
        ALLOWED_JOB_RETRIES=1

        for i in $(seq $TRIES)
        do
            ready=$(oc get osdpd/$DEPLOYMENT_NAME -o jsonpath='{.status.conditions[0].status}')
            if [ "$ready" == "True" ]; then
                echo "Pre adoption validation Deployment is Ready"
                exit 0
            else
                failed=$(oc get jobs -l openstackdataplanedeployment=$DEPLOYMENT_NAME -o jsonpath="{.items[?(@.status.failed > $ALLOWED_JOB_RETRIES)].metadata.name}")
                if [ ! -z "${failed}" ]; then
                    echo "There are failed AnsibleEE jobs: $failed"
                    exit 1
                fi
            fi

        sleep $DELAY
        done

        echo "Run out of retries"
        exit 2

- name: Remove the remaining TripleO services
  block:
    - name: Create an OpenStackDataPlaneService CR to clean up the data plane services you are adopting
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneService
        metadata:
          name: tripleo-cleanup
        spec:
          playbook: osp.edpm.tripleo_cleanup
        EOF

    - name: Create the OpenStackDataPlaneDeployment CR to run the clean-up
      no_log: "{{ use_no_log }}"
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ nodesets_env_oc }}

        {%+ if edpm_nodes_networker is defined or edpm_networker_deploy +%}
        NODESETS="${NODESETS%]*},openstack-networker]"
        {%+ endif +%}

        oc apply -f - <<EOF
        apiVersion: dataplane.openstack.org/v1beta1
        kind: OpenStackDataPlaneDeployment
        metadata:
          name: tripleo-cleanup
        spec:
          nodeSets: $NODESETS
          servicesOverride:
          - tripleo-cleanup
          backoffLimit: 1
        EOF

    - name: Wait for the deployment to finish
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}

        DEPLOYMENT_NAME=tripleo-cleanup
        TRIES=180
        DELAY=10
        ALLOWED_JOB_RETRIES=1

        for i in $(seq $TRIES)
        do
            ready=$(oc get osdpd/$DEPLOYMENT_NAME -o jsonpath='{.status.conditions[0].status}')
            if [ "$ready" == "True" ]; then
                echo "Pre adoption validation Deployment is Ready"
                exit 0
            else
                failed=$(oc get jobs -l openstackdataplanedeployment=$DEPLOYMENT_NAME -o jsonpath="{.items[?(@.status.failed > $ALLOWED_JOB_RETRIES)].metadata.name}")
                if [ ! -z "${failed}" ]; then
                    echo "There are failed AnsibleEE jobs: $failed"
                    exit 1
                fi
            fi

        sleep $DELAY
        done

        echo "Run out of retries"
        exit 2

- name: When the clean-up is finished, deploy the OpenStackDataPlaneDeployment CR
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ nodesets_env_oc }}

    {%+ if edpm_nodes_networker is defined or edpm_networker_deploy +%}
    NODESETS="${NODESETS%]*},openstack-networker]"
    {%+ endif +%}

    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneDeployment
    metadata:
      name: openstack
    spec:
      nodeSets: $NODESETS
      backoffLimit: 3
    EOF

- name: wait for dataplane node set to be ready
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}

    DEPLOYMENT_NAME=openstack
    TRIES=720
    DELAY=30
    ALLOWED_JOB_RETRIES=3

    for i in $(seq $TRIES)
    do
        ready=$(oc get osdpd/$DEPLOYMENT_NAME -o jsonpath='{.status.conditions[0].status}')
        if [ "$ready" == "True" ]; then
            echo "Deployment is Ready"
            exit 0
        else
            failed=$(oc get jobs -l openstackdataplanedeployment=$DEPLOYMENT_NAME -o jsonpath="{.items[?(@.status.failed > $ALLOWED_JOB_RETRIES)].metadata.name}")
            if [ ! -z "${failed}" ]; then
                echo "There are failed AnsibleEE jobs: $failed"
                exit 1
            fi
        fi

    sleep $DELAY
    done

    echo "Run out of retries"
    exit 2

  register: osdpd_running_result

- name: Complete Nova services Wallaby->Antelope FFU
  when: compute_adoption|bool
  ansible.builtin.include_tasks:
    file: nova_ffu.yaml

- name: Adopted Nova FFU post-checks
  when: compute_adoption|bool
  ansible.builtin.include_tasks:
    file: nova_verify.yaml

- name: Cleanup non-adopted Neutron and OVN agents
  ansible.builtin.include_tasks:
    file: neutron_agents_cleanup.yaml

- name: Adopted Neutron and OVN agents post-checks
  ansible.builtin.include_tasks:
    file: neutron_verify.yaml

- name: Adopted Octavia post-checks
  when: octavia_adoption|bool
  ansible.builtin.include_tasks:
    file: octavia_verify.yaml

- name: Adopted Cinder post-checks
  ansible.builtin.include_tasks:
    file: cinder_verify.yaml
