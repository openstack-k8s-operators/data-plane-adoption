- name: set Nova services shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    nova_header: |
      alias openstack="oc exec -t openstackclient -- openstack"

# NOTE(bogdando): do not use 'set -o pipefail' for these verifications
- name: verify if the existing test VM instance is running
  when: prelaunch_test_instance|bool
  ansible.builtin.shell: |
    {{ nova_header }}
    ${BASH_ALIASES[openstack]} server --os-compute-api-version 2.48 show --diagnostics test 2>&1 || echo FAIL
  register: nova_verify_running_result
  failed_when:
    - ("FAIL" in nova_verify_running_result.stdout_lines)

- name: verify if the Compute services can stop the existing test VM instance
  when: prelaunch_test_instance|bool
  ansible.builtin.shell: |
    {{ nova_header }}
    ${BASH_ALIASES[openstack]} server list -c Name -c Status -f value | grep -qF "test ACTIVE" && ${BASH_ALIASES[openstack]} server stop test || echo PASS
    ${BASH_ALIASES[openstack]} server list -c Name -c Status -f value | grep -qF "test SHUTOFF" || echo FAIL
    ${BASH_ALIASES[openstack]} server --os-compute-api-version 2.48 show --diagnostics test 2>&1 || echo PASS
  register: nova_verify_stop_result
  until:
    - ("FAIL" not in nova_verify_stop_result.stdout_lines)
    - ("it is in power state shutdown" in nova_verify_stop_result.stdout)
  retries: 10
  delay: "{{ dataplane_retry_delay }}"

- name: verify if the Compute services can start the existing test VM instance
  when: prelaunch_test_instance|bool
  ansible.builtin.shell: |
    {{ nova_header }}
    ${BASH_ALIASES[openstack]} server list -c Name -c Status -f value | grep -qF "test SHUTOFF" && ${BASH_ALIASES[openstack]} server start test || echo PASS
    ${BASH_ALIASES[openstack]} server list -c Name -c Status -f value | grep -qF "test ACTIVE" && \
      ${BASH_ALIASES[openstack]} server --os-compute-api-version 2.48 show --diagnostics test --fit-width -f json | jq -r '.state' | grep running || echo FAIL
  register: nova_verify_start_result
  until: ("FAIL" not in nova_verify_start_result.stdout_lines)
  retries: 60
  delay: "{{ dataplane_retry_delay }}"
