- name: deploy podified OVN ovsdb-servers
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=merge --patch '
    spec:
      ovn:
        enabled: true
        template:
          ovnDBCluster:
            ovndbcluster-nb:
              dbType: NB
              storageRequest: 10G
              networkAttachment: internalapi
            ovndbcluster-sb:
              dbType: SB
              storageRequest: 10G
              networkAttachment: internalapi
    '

- name: wait for OVN ovsdb-servers to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get pod --selector=service=ovsdbserver-nb -o jsonpath='{.items[0].status.phase}{"\n"}' | grep Running
    oc get pod --selector=service=ovsdbserver-sb -o jsonpath='{.items[0].status.phase}{"\n"}' | grep Running
  register: ovn_ovsdb_servers_running_result
  until: ovn_ovsdb_servers_running_result is success
  retries: 60
  delay: 2

# NOTE: w/o pods readiness gates, a service IP is not immediately comes in, so we wait
- name: get podified OVN NB ovsdb-server service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-nb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_nb_ip_result
  until: podified_ovn_nb_ip_result is success
  retries: 10
  delay: 2

- name: get podified OVN SB ovsdb-server IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-sb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_sb_ip_result
  until: podified_ovn_sb_ip_result is success
  retries: 10
  delay: 2

- name: get OSPdO OVN ovsdb-server IP
  delegate_to: "{{ adoption_ospdo_host }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    oc get cm -o yaml|grep ovn_dbs_node_ips|tr -d ' '|sed 's/.*ovn_dbs_node_ips:\\n-//g'|sed 's/\\n.*//g'
  register: source_ovndb_ip
  when: ospdo_src is defined

- name: set OVN copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    ovn_copy_shell_vars: |
      STORAGE_CLASS={{ storage_class_name }}
      PODIFIED_OVSDB_NB_IP={{ podified_ovn_nb_ip_result.stdout }}
      PODIFIED_OVSDB_SB_IP={{ podified_ovn_sb_ip_result.stdout }}
      OVSDB_IMAGE={{ ovn_image }}

      SOURCE_OVSDB_IP={{ source_ovndb_ip }}

      CONTROLLER1_SSH="{{ controller1_ssh }}"
      CONTROLLER2_SSH="{{ controller2_ssh }}"
      CONTROLLER3_SSH="{{ controller3_ssh }}"

- name: start an adoption helper pod
  ansible.builtin.shell: |-
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc apply -f - <<EOF
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ovn-data
      labels:
        app: adoption
    spec:
      storageClassName: $STORAGE_CLASS
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: ovn-copy-data
      annotations:
        openshift.io/scc: anyuid
        k8s.v1.cni.cncf.io/networks: internalapi
      labels:
        app: adoption
    spec:
      containers:
      - image: $OVSDB_IMAGE
        command: [ "sh", "-c", "sleep infinity"]
        name: adoption
        volumeMounts:
        - mountPath: /backup
          name: ovn-data
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: ovn-data
        persistentVolumeClaim:
          claimName: ovn-data
    EOF
  changed_when: true
  notify: delete adoption helper pod and pvc

- name: wait for the pod to come up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait --for condition=Ready pod/ovn-copy-data --timeout=30s
  register: ovn_data_pod_result
  until: ovn_data_pod_result is success
  retries: 2
  delay: 6

- name: stop northd service
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    $CONTROLLER1_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER2_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER3_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
  when: ospdo_src is undefined

- name: stop northd service
  delegate_to: "{{ adoption_ospdo_host }}"
  ansible.builtin.shell: |
    {{ controller1_ssh }} sudo systemctl stop tripleo_ovn_cluster_northd
    {{ controller2_ssh }} sudo systemctl stop tripleo_ovn_cluster_northd
    {{ controller3_ssh }} sudo systemctl stop tripleo_ovn_cluster_northd
  when: ospdo_src is defined

- name: dump OVN databases
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6641 > /backup/ovs-nb.db"
    oc exec ovn-copy-data -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6642 > /backup/ovs-sb.db"
  when: ospdo_src is undefined

- name: dump OVN databases
  delegate_to: "{{ adoption_ospdo_host }}"
  ansible.builtin.shell: |
    {{ exec_ospdoclnt_pod }} ovsdb-client  backup tcp:{{ source_ovndb_ip.stdout }}:{{ item }}
  with_items:
   - 6641 >/tmp/ovs-nb.db
   - 6642 >/tmp/ovs-sb.db
  when: ospdo_src is defined

- name: Fetch file from adoption_ospdo_host
  delegate_to: "{{ adoption_ospdo_host }}"
  fetch:
    src: "{{ item }}"
    dest: /tmp/{{item.split('/')[-1]}}
    flat: yes
  with_items:
    - /tmp/ovs-nb.db
    - /tmp/ovs-sb.db
  when: ospdo_src is defined

- name: put the backup db's in the helper pod
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc cp {{ item }} ovn-copy-data:/backup/
  with_items:
  - /tmp/ovs-nb.db
  - /tmp/ovs-sb.db

- name: upgrade OVN databases to the latest schema from podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_NB_IP:6641 > /backup/ovs-nb.ovsschema && ovsdb-tool convert /backup/ovs-nb.db /backup/ovs-nb.ovsschema"
    oc exec ovn-copy-data -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_SB_IP:6642 > /backup/ovs-sb.ovsschema && ovsdb-tool convert /backup/ovs-sb.db /backup/ovs-sb.ovsschema"

- name: restore OVN database backups to podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_NB_IP:6641 < /backup/ovs-nb.db"
    oc exec ovn-copy-data -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_SB_IP:6642 < /backup/ovs-sb.db"

- name: deploy podified OVN northd service to keep databases in sync
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=merge --patch '
    spec:
      ovn:
        enabled: true
        template:
          ovnNorthd:
            networkAttachment: internalapi
            replicas: 1
    '

- name: list briefs from OVN NB and SB databases
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}

    oc exec ovsdbserver-nb-0 ovn-nbctl show
    oc exec ovsdbserver-sb-0 ovn-sbctl show

  register: ovn_show_responding_result
