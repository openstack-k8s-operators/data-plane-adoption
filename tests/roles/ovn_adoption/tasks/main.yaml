- name: deploy podified OVN ovsdb-servers
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=merge --patch '{{ ovs_db_patch }}'

- name: wait for OVN ovsdb-servers to start up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait pod --for condition=Ready --selector=service=ovsdbserver-nb
    oc wait pod --for condition=Ready --selector=service=ovsdbserver-sb
  register: ovn_ovsdb_servers_running_result
  until: ovn_ovsdb_servers_running_result is success
  retries: 60
  delay: 2

# NOTE: w/o pods readiness gates, a service IP is not immediately comes in, so we wait
- name: get podified OVN NB ovsdb-server service cluster IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-nb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_nb_ip_result
  until: podified_ovn_nb_ip_result is success
  retries: 10
  delay: 2

- name: get podified OVN SB ovsdb-server IP
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc get svc --selector "statefulset.kubernetes.io/pod-name=ovsdbserver-sb-0" -ojsonpath='{.items[0].spec.clusterIP}'
  register: podified_ovn_sb_ip_result
  until: podified_ovn_sb_ip_result is success
  retries: 10
  delay: 2

- name: execute alternative tasks when source env is ODPdO
  ansible.builtin.include_tasks: ovn_ospdo_src_vars.yaml
  when: ospdo_src| bool

- name: set OVN copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    ovn_copy_shell_vars: |
      STORAGE_CLASS={{ storage_class_name }}
      PODIFIED_OVSDB_NB_IP={{ podified_ovn_nb_ip_result.stdout }}
      PODIFIED_OVSDB_SB_IP={{ podified_ovn_sb_ip_result.stdout }}
      OVSDB_IMAGE={{ ovn_image }}

      SOURCE_OVSDB_IP={{ source_ovndb_ip }}

      CONTROLLER1_SSH="{{ controller1_ssh }}"
      CONTROLLER2_SSH="{{ controller2_ssh }}"
      CONTROLLER3_SSH="{{ controller3_ssh }}"
  when: not ospdo_src| bool

- name: start an adoption helper pod
  ansible.builtin.shell: |-
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}
    {{ namespace_env}}

    oc apply -f - <<EOF
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: ovn-data-cert
      namespace: $NAMESPACE
    spec:
      commonName: ovn-data-cert
      secretName: ovn-data-cert
      issuerRef:
        name: rootca-internal
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: $NAMESPACE
      name: ovn-data
      labels:
        app: adoption
    spec:
      storageClassName: $STORAGE_CLASS
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: ovn-copy-data
      annotations:
        openshift.io/scc: anyuid
        k8s.v1.cni.cncf.io/networks: {{ copy_pods_custom_networks | default('internalapi') }}
      labels:
        app: adoption
    spec:
      {{ copy_pods_custom_spec|default('') }}
      containers:
      - image: $OVSDB_IMAGE
        command: [ "sh", "-c", "sleep infinity"]
        name: adoption
        volumeMounts:
        - mountPath: /backup
          name: ovn-data
        - mountPath: /etc/pki/tls/misc
          name: ovn-data-cert
          readOnly: true
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: ovn-data
        persistentVolumeClaim:
          claimName: ovn-data
      - name: ovn-data-cert
        secret:
          secretName: ovn-data-cert
    EOF
  changed_when: true
  notify: delete adoption helper pod and pvc

- name: wait for the pod to come up
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ namespace_env}}
    oc wait --for condition=Ready -n $NAMESPACE pod/ovn-copy-data --timeout=30s
  register: ovn_data_pod_result
  until: ovn_data_pod_result is success
  retries: 2
  delay: 6

- name: stop northd service
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    $CONTROLLER1_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER2_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service
    $CONTROLLER3_SSH sudo systemctl stop tripleo_ovn_cluster_northd.service

# If ovn_adoption is done using scenario A (different networks between podified
# and tripleo deployments) in order to be able to dump OVN database a nftable
# filter allowing traffic from podified network is needed. Adding the rules
# no matter the scenario to simplify logic and on a non-scenario-A environment
# this rule shouldn't harm.
- name: Add nftables rule to allow podified internalapi trafic to controllers
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    $CONTROLLER1_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6641 ct state new counter accept
    $CONTROLLER1_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6642 ct state new counter accept
    $CONTROLLER2_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6641 ct state new counter accept
    $CONTROLLER2_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6642 ct state new counter accept
    $CONTROLLER3_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6641 ct state new counter accept
    $CONTROLLER3_SSH sudo nft add rule inet filter INPUT ip saddr 172.17.1.0/24 tcp dport 6642 ct state new counter accept

- name: dump OVN databases using tcp connection
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}
    {{ namespace_env}}

    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6641 > /backup/ovs-nb.db"
    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client backup tcp:$SOURCE_OVSDB_IP:6642 > /backup/ovs-sb.db"
  when: enable_tlse|bool is false

- name: dump OVN databases using ssl connection
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client backup --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$SOURCE_OVSDB_IP:6641 > /backup/ovs-nb.db"
    oc exec ovn-copy-data -- bash -c "ovsdb-client backup --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$SOURCE_OVSDB_IP:6642 > /backup/ovs-sb.db"
  when: enable_tlse|bool

- name: upgrade OVN databases to the latest schema from podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}
    {{ namespace_env }}

    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_NB_IP:6641 > /backup/ovs-nb.ovsschema && ovsdb-tool convert /backup/ovs-nb.db /backup/ovs-nb.ovsschema"
    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client get-schema tcp:$PODIFIED_OVSDB_SB_IP:6642 > /backup/ovs-sb.ovsschema && ovsdb-tool convert /backup/ovs-sb.db /backup/ovs-sb.ovsschema"
  when: enable_tlse|bool is false

- name: upgrade OVN databases to the latest schema from podified ovsdb-servers (tls)
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client get-schema --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$PODIFIED_OVSDB_NB_IP:6641 > /backup/ovs-nb.ovsschema && ovsdb-tool convert /backup/ovs-nb.db /backup/ovs-nb.ovsschema"
    oc exec ovn-copy-data -- bash -c "ovsdb-client get-schema --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$PODIFIED_OVSDB_SB_IP:6642 > /backup/ovs-sb.ovsschema && ovsdb-tool convert /backup/ovs-sb.db /backup/ovs-sb.ovsschema"
  when: enable_tlse|bool

- name: restore OVN database backups to podified ovsdb-servers
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    oc exec ovn-copy-data -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_NB_IP:6641 < /backup/ovs-nb.db"
    oc exec ovn-copy-data -- bash -c "ovsdb-client restore tcp:$PODIFIED_OVSDB_SB_IP:6642 < /backup/ovs-sb.db"
  when: enable_tlse|bool is false

- name: restore OVN database backups to podified ovsdb-servers (tls)
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}
    {{ namespace_env}}

    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client restore --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$PODIFIED_OVSDB_NB_IP:6641 < /backup/ovs-nb.db"
    oc exec -n $NAMESPACE ovn-copy-data -- bash -c "ovsdb-client restore --ca-cert=/etc/pki/tls/misc/ca.crt --private-key=/etc/pki/tls/misc/tls.key --certificate=/etc/pki/tls/misc/tls.crt ssl:$PODIFIED_OVSDB_SB_IP:6642 < /backup/ovs-sb.db"
  when: enable_tlse|bool

- name: deploy podified OVN northd service to keep databases in sync
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=merge --patch '{{ ovn_northd_patch }}'

- name: Patch OVN add baremetal bridge mapping
  when: ironic_adoption|bool
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=merge --patch '{{ ovn_nic_mapping_patch }}'

- name: Enable ovn controller
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc patch openstackcontrolplane openstack --type=json -p="[{'op': 'remove', 'path': '/spec/ovn/template/ovnController/nodeSelector'}]"

- name: list briefs from OVN NB and SB databases
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}

    oc exec ovsdbserver-nb-0 -- ovn-nbctl show
    oc exec ovsdbserver-sb-0 -- ovn-sbctl show

  register: ovn_show_responding_result

- name: stop old ovn ovsdb services
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ ovn_copy_shell_vars }}

    $CONTROLLER1_SSH sudo systemctl stop tripleo_ovn_cluster_north_db_server.service
    $CONTROLLER2_SSH sudo systemctl stop tripleo_ovn_cluster_north_db_server.service
    $CONTROLLER3_SSH sudo systemctl stop tripleo_ovn_cluster_north_db_server.service

    $CONTROLLER1_SSH sudo systemctl stop tripleo_ovn_cluster_south_db_server.service
    $CONTROLLER2_SSH sudo systemctl stop tripleo_ovn_cluster_south_db_server.service
    $CONTROLLER3_SSH sudo systemctl stop tripleo_ovn_cluster_south_db_server.service
