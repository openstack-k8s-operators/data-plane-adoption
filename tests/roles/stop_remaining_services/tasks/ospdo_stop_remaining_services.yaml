- name: set shell vars for stopping other services
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    stop_other_services_shell_vars: |
      CONTROLLER1_SSH="{{ controller1_ssh }}"
      CONTROLLER2_SSH="{{ controller2_ssh }}"
      CONTROLLER3_SSH="{{ controller3_ssh }}"
      COMPUTE1_SSH="{{ compute1_ssh }}"
      COMPUTE2_SSH="{{ compute2_ssh }}"

- name: stop compute services
  delegate_to: "{{ adoption_ospdo_host }}"
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ stop_other_services_shell_vars }}

       ComputeServicesToStop=(
                    "tripleo_nova_compute.service"
                    "tripleo_nova_libvirt.target"
                    "tripleo_nova_migration_target.service"
                    "tripleo_nova_virtlogd_wrapper.service"
                    "tripleo_nova_virtnodedevd.service"
                    "tripleo_nova_virtproxyd.service"
                    "tripleo_nova_virtqemud.service"
                    "tripleo_nova_virtsecretd.service"
                    "tripleo_nova_virtstoraged.service")

    PacemakerResourcesToStop=(
                    "galera-bundle"
                    "haproxy-bundle"
                    "rabbitmq-bundle")

    echo "Disabling systemd units and cleaning up for compute services"
    for i in 1; do
        SSH_CMD=COMPUTE${i}_SSH
        if [ ! -z "${!SSH_CMD}" ]; then
        for service in ${ComputeServicesToStop[*]}; do
            echo "Stopping the $service in compute $i"
            ${!SSH_CMD} sudo hostname
            if ${!SSH_CMD} sudo systemctl is-active $service; then
                ${!SSH_CMD} sudo systemctl stop $service
                ${!SSH_CMD} sudo systemctl disable $service
            fi
        done
        fi
    done

    echo "Stopping pacemaker services"
    for i in {1..3}; do
        SSH_CMD=CONTROLLER${i}_SSH
        if [ ! -z "${!SSH_CMD}" ]; then
            echo "Using controller $i to run pacemaker commands"
            for resource in ${PacemakerResourcesToStop[*]}; do
                if ${!SSH_CMD} sudo pcs resource config $resource; then
                    ${!SSH_CMD} sudo pcs resource disable $resource
                fi
            done
            break
        fi
    done
