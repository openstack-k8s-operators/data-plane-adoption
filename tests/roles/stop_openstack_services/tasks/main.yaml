# - name: set shell vars for stopping openstack services
#   no_log: "{{ use_no_log }}"
#   ansible.builtin.set_fact:
#     stop_openstack_services_shell_vars: |
#       CONTROLLER1_SSH="{{ controller1_ssh }}"
#       CONTROLLER2_SSH="{{ controller2_ssh }}"
#       CONTROLLER3_SSH="{{ controller3_ssh }}"

# TODO(bogdando): split Compute services on dataplane after the multi-node/multi-cells adoption supported
- name: stop control plane services
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    PacemakerResourcesToStop=("openstack-cinder-volume"
                              "openstack-cinder-backup"
                              "openstack-manila-share")

    echo "Stopping systemd OpenStack services"
    for i in {0..2}; do
                echo "Stopping the tripleo services in controller $i"

                sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-${i}.ctlplane "sudo  systemctl stop tripleo*" ''

                sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-${i}.ctlplane "systemctl list-units --all|grep tripleo" ''
    done

    echo "Stopping pacemaker OpenStack services"
    for i in {0..2}; do
        SSH_CMD=CONTROLLER${i}_SSH
        if [ ! -z "${!SSH_CMD}" ]; then
            echo "Using controller $i to run pacemaker commands"
            for resource in ${PacemakerResourcesToStop[*]}; do
                if ${!SSH_CMD} sudo pcs resource config $resource; then
                    ${!SSH_CMD} sudo pcs resource disable $resource
                fi
            done
            break
        fi
    done

    echo "Stopping pacemaker OpenStack services"
            for resource in ${PacemakerResourcesToStop[*]}; do
                if sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-0.ctlplane "sudo pcs resource config $resource" ''; then
                sshpass -p{{ admin_password }} ssh root@{{ adoption_ospdo_host }} 'export KUBECONFIG=/home/ocp/crucible/kubeconfig.ostest; oc exec -it -n openstack openstackclient -c openstackclient 'ssh controller-0.ctlplane "sudo pcs resource disable $resource" ''
                fi
            done
  ignore_errors: true